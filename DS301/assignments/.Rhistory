RSS_reduced_model <- sum(resid(reduced_model)^2)
cat("RSS for the Full Model:", RSS_full_model, "\n")
cat("RSS for the Reduced Model:", RSS_reduced_model, "\n")
####################1e.####################
# Fit the full model
full_model <- lm(Sales ~ . - ShelveLoc, data = Carseats)
# Fit the reduced model (intercept-only)
reduced_model <- lm(Sales ~ 1, data = Carseats)
# Perform the F-test
f_test_result <- anova(reduced_model, full_model)
# Extract the F-statistic and p-value
f_statistic <- f_test_result$F[1]
p_value <- f_test_result$`Pr(>F)`[1]
# Report the F-test results
cat("Hypothesis Test for Model Comparison (F-Test):\n")
cat("Null Hypothesis: The reduced model is as good as the full model (no improvement).\n")
cat("Alternative Hypothesis: The full model is better than the reduced model.\n")
cat("Test Statistic (F-statistic):", f_statistic, "\n")
cat("P-value:", p_value, "\n")
# Check if the p-value is less than alpha to make a decision
alpha <- 0.05
if (p_value < alpha) {
cat("Conclusion: Reject the null hypothesis. The full model is better than the reduced model.\n")
} else {
cat("Conclusion: Fail to reject the null hypothesis. There is no evidence that the full model is better than the reduced model.\n")
}
head(Carseats)
####################1e.####################
# Fit the full model
full_model <- lm(Sales ~ . - ShelveLoc, data = Carseats)
# Fit the reduced model (intercept-only)
reduced_model <- lm(Sales ~ 1, data = Carseats)
# Perform the F-test
f_test_result <- anova(reduced_model, full_model)
# Extract the F-statistic and p-value
f_statistic <- f_test_result$F[1]
p_value <- f_test_result$`Pr(>F)`[1]
# Report the F-test results
cat("Hypothesis Test for Model Comparison (F-Test):\n")
cat("Null Hypothesis: The reduced model is as good as the full model (no improvement).\n")
cat("Alternative Hypothesis: The full model is better than the reduced model.\n")
cat("Test Statistic (F-statistic):", f_statistic, "\n")
cat("P-value:", p_value, "\n")
####################1e.####################
# Fit the full model
full_model <- lm(Sales ~ . - ShelveLoc, data = Carseats)
# Fit the reduced model (intercept-only)
reduced_model <- lm(Sales ~ 1, data = Carseats)
# Calculate the degrees of freedom for each model
df_full <- length(coef(full_model))
df_reduced <- length(coef(reduced_model))
# Calculate the residuals sum of squares (RSS) for each model
RSS_full_model <- sum(resid(full_model)^2)
RSS_reduced_model <- sum(resid(reduced_model)^2)
# Calculate the F-statistic
F_statistic <- ((RSS_reduced_model - RSS_full_model) / (df_full - df_reduced)) / (RSS_full_model / (nrow(Carseats) - df_full))
# Calculate the p-value using the F-distribution
p_value <- 1 - pf(F_statistic, df_full - df_reduced, nrow(Carseats) - df_full)
# Set significance level (alpha)
alpha <- 0.05
# Output the results
cat("Hypothesis Test for Model Comparison:\n")
cat("Null Hypothesis (H0): The reduced model is as good as the full model.\n")
cat("Alternative Hypothesis (Ha): The full model is significantly better than the reduced model.\n")
cat("F-statistic:", F_statistic, "\n")
cat("P-value:", p_value, "\n")
# Make a decision based on the p-value
if (p_value < alpha) {
cat("Conclusion: Reject the null hypothesis. The full model is significantly better than the reduced model.\n")
} else {
cat("Conclusion: Fail to reject the null hypothesis. There is no significant difference between the models; the reduced model is as good as the full model.\n")
}
####################1e.####################
# Fit the full model
full_model <- lm(Sales ~ . - ShelveLoc, data = Carseats)
# Fit the reduced model (intercept-only)
reduced_model <- lm(Sales ~ 1, data = Carseats)
# Calculate the degrees of freedom for each model
df_full <- length(coef(full_model))
df_reduced <- length(coef(reduced_model))
# Calculate the residuals sum of squares (RSS) for each model
RSS_full_model <- sum(resid(full_model)^2)
RSS_reduced_model <- sum(resid(reduced_model)^2)
# Calculate the F-statistic
F_statistic <- ((RSS_reduced_model - RSS_full_model) / (df_full - df_reduced)) / (RSS_full_model / (nrow(Carseats) - df_full))
# Calculate the p-value using the F-distribution
p_value <- 1 - pf(F_statistic, df_full - df_reduced, nrow(Carseats) - df_full)
# Set significance level (alpha)
alpha <- 0.05
# Output the results
cat("Hypothesis Test for Model Comparison:\n")
cat("Null Hypothesis (H0): The reduced model is as good as the full model.\n")
cat("Alternative Hypothesis (Ha): The full model is significantly better than the reduced model.\n")
cat("F-statistic:", F_statistic, "\n")
cat("P-value:", p_value, "\n")
# Make a decision based on the p-value
if (p_value < alpha) {
cat("Conclusion: Reject the null hypothesis. The full model is significantly better than the reduced model.\n")
} else {
cat("Conclusion: Fail to reject the null hypothesis. There is no significant difference between the models; the reduced model is as good as the full model.\n")
}
####################1e.####################
# Calculate the degrees of freedom for each model
df_full = length(coef(full_model))
df_reduced = length(coef(reduced_model))
# Calculate the F-statistic
F_statistic = ((RSS_reduced_model - RSS_full_model) / (df_full - df_reduced)) / (RSS_full_model / (nrow(Carseats) - df_full))
F_statistic
# Calculate the p-value using the F-distribution
p_value = 1 - pf(F_statistic, df_full - df_reduced, nrow(Carseats) - df_full)
p_value
# Set significance level (alpha)
alpha = 0.05
# Make a decision based on the p-value
if (p_value < alpha) {
cat("Conclusion: Reject the null hypothesis. The full model is significantly better than the reduced model.\n")
} else {
cat("Conclusion: Fail to reject the null hypothesis. There is no significant difference between the models; the reduced model is as good as the full model.\n")
}
####################1a.####################
model = lm(Sales ~ . - ShelveLoc, data = Carseats)
summary(model)
####################1f.####################
# Define the predictor values
new_data <- data.frame(
CompPrice = mean(Carseats$CompPrice),  # Average competitor price
Income = median(Carseats$Income),     # Median community income level
Advertising = 15,                      # Advertising level
Population = 500,                     # Population
Price = 50,                            # Price for car seats at each site
Age = 30,                              # Average age of the local population
Education = 10,                        # Education level
UrbanYes = 1                           # Store is in an urban location (assuming this is a binary variable)
)
# Estimate f(X)
estimated_sales <- predict(model, newdata = new_data, interval = "prediction")
# Extract the estimate and prediction interval
estimate <- estimated_sales[1]
lower_bound <- estimated_sales[2]
upper_bound <- estimated_sales[3]
####################1f.####################
# Define the predictor values
new_data <- data.frame(
CompPrice = mean(Carseats$CompPrice),  # Average competitor price
Income = median(Carseats$Income),     # Median community income level
Advertising = 15,                      # Advertising level
Population = 500,                     # Population
Price = 50,                            # Price for car seats at each site
Age = 30,                              # Average age of the local population
Education = 10,                        # Education level
UrbanYes = 1                           # Store is in an urban location (assuming this is a binary variable)
)
# Estimate f(X)
estimated_sales <- predict(full_model, newdata = new_data, interval = "prediction")
# Extract the estimate and prediction interval
estimate <- estimated_sales[1]
# Estimate f(X)
estimated_sales <- predict(full_model, newdata = new_data, interval = "prediction")
####################1f.####################
full_model <- lm(Sales ~ . - ShelveLoc, data = Carseats)
# Define the predictor values
competitor_price <- mean(Carseats$CompPrice)  # Average competitor price
median_income <- median(Carseats$Income)  # Median community income level
advertising <- 15
population <- 500
price_car_seats <- 50
average_age <- 30
education <- 10
urban_location <- "Yes"  # Assuming this is a binary variable, "Yes" for urban, "No" for non-urban
# Create a data frame with the predictor values
new_data <- data.frame(
CompPrice = competitor_price,
Income = median_income,
Advertising = advertising,
Population = population,
Price = price_car_seats,
Age = average_age,
Education = education,
Urban = urban_location
)
# Predict f(X) for the new data
predicted_sales <- predict(full_model, newdata = new_data, interval = "prediction", level = 0.95)
####################1f.####################
full_model <- lm(Sales ~ . - ShelveLoc, data = Carseats)
# Define the predictor values
competitor_price <- mean(Carseats$CompPrice)  # Average competitor price
median_income <- median(Carseats$Income)  # Median community income level
advertising <- 15
population <- 500
price_car_seats <- 50
average_age <- 30
education <- 10
urban_location <- "Yes"  # Assuming this is a binary variable, "Yes" for urban, "No" for non-urban
# Create a data frame with the predictor values
new_data <- data.frame(
CompPrice = competitor_price,
Income = median_income,
Advertising = advertising,
Population = population,
Price = price_car_seats,
Age = average_age,
Education = education,
Urban = urban_location
)
# Predict f(X) for the new data
predicted_sales <- predict(full_model, newdata = new_data, interval = "prediction", level = 0.95)
# Extract the prediction and prediction interval
prediction <- predicted_sales[, 1]
prediction_interval <- predicted_sales[, -c(1, 2)]
# Print the prediction and prediction interval
cat("Estimated Sales (f(X)): ", prediction, "\n")
####################1f.####################
full_model <- lm(Sales ~ . - ShelveLoc, data = Carseats)
# Define the predictor values for your specific case
predictor_values <- data.frame(
CompPrice = mean(Carseats$CompPrice),  # Average competitor price
Income = median(Carseats$Income),      # Median community income
Advertising = 15,                      # Advertising budget
Population = 500,                     # Population
Price = 50,                            # Price for car seats
Age = 30,                              # Average age of local population
Education = 10,                        # Education level
Urban = "Yes"                          # Store location (urban)
)
# Use the fitted full model to make predictions
predicted_sales <- predict(full_model, newdata = predictor_values)
summary(full_mode)
summary(full_model)
####################1f.####################
full_model <- lm(Sales ~ . - ShelveLoc, data = Carseats)
head(Carseats)
?Carseats
####################1a.####################
model = lm(Sales ~ . - ShelveLoc, data = Carseats)
summary(model)
####################1b.####################
residual_variance = summary(model)$sigma^2
####################1d.####################
full_model <- lm(Sales ~ . - ShelveLoc, data = Carseats)
reduced_model <- lm(Sales ~ 1, data = Carseats)
RSS_full_model <- sum(resid(full_model)^2)
RSS_reduced_model <- sum(resid(reduced_model)^2)
RSS_full_model
RSS_reduced_model
####################1f.####################
# Check the summary of the full model to ensure ShelveLoc is excluded
summary(full_model)
# Define the predictor values for your specific case
predictor_values <- data.frame(
CompPrice = mean(Carseats$CompPrice),  # Average competitor price
Income = median(Carseats$Income),      # Median community income
Advertising = 15,                      # Advertising budget
Population = 500,                     # Population
Price = 50,                            # Price for car seats
Age = 30,                              # Average age of local population
Education = 10,                        # Education level
Urban = "Yes"                          # Store location (urban)
)
# Use the fitted full model to make predictions
predicted_sales <- predict(full_model, newdata = predictor_values)
#Question 1: Statistical Inference
library(ISLR2)
head(Carseats)
####################1a.####################
model = lm(Sales ~ . - ShelveLoc, data = Carseats)
summary(model)
####################1b.####################
residual_variance = summary(model)$sigma^2
####################1d.####################
full_model <- lm(Sales ~ . - ShelveLoc, data = Carseats)
reduced_model <- lm(Sales ~ 1, data = Carseats)
RSS_full_model <- sum(resid(full_model)^2)
RSS_reduced_model <- sum(resid(reduced_model)^2)
RSS_full_model
RSS_reduced_model
####################1f.####################
# Check the summary of the full model to ensure ShelveLoc is excluded
summary(full_model)
# Define the predictor values for your specific case
predictor_values <- data.frame(
CompPrice = mean(Carseats$CompPrice),  # Average competitor price
Income = median(Carseats$Income),      # Median community income
Advertising = 15,                      # Advertising budget
Population = 500,                     # Population
Price = 50,                            # Price for car seats
Age = 30,                              # Average age of local population
Education = 10,                        # Education level
Urban = "Yes"                          # Store location (urban)
)
####################1f.####################
Xh = data.frame(CompPrice = mean(Carseats$CompPrice),  # Average competitor price
Income = median(Carseats$Income),      # Median community income
Advertising = 15,                      # Advertising budget
Population = 500,                     # Population
Price = 50,                            # Price for car seats
Age = 30,                              # Average age of local population
Education = 10,                        # Education level
Urban = "Yes")
predict(full_model,newdata=Xh)
predict(model,newdata=Xh,interval='prediction',level=0.95)
####################1f.####################
# Create the new data frame without 'ShelveLoc'
Xh <- data.frame(CompPrice = mean(Carseats$CompPrice),  # Average competitor price
Income = median(Carseats$Income),      # Median community income
Advertising = 15,                      # Advertising budget
Population = 500,                     # Population
Price = 50,                            # Price for car seats
Age = 30,                              # Average age of local population
Education = 10,                        # Education level
Urban = "Yes")
# Predict the sales using the full model
sales_prediction <- predict(full_model, newdata = Xh)
####################1f.####################
# Fit the full model without ShelveLoc
full_model <- lm(Sales ~ . - ShelveLoc, data = Carseats)
# Remove 'ShelveLoc' from the new data frame Xh
Xh <- data.frame(CompPrice = mean(Carseats$CompPrice),
Income = median(Carseats$Income),
Advertising = 15,
Population = 500,
Price = 50,
Age = 30,
Education = 10,
Urban = "Yes")
# Ensure that 'ShelveLoc' is not present in the model
Xh$ShelveLoc <- NULL
# Predict the sales using the full model
sales_prediction <- predict(full_model, newdata = Xh)
# Quantify the uncertainty surrounding the estimate
prediction_interval <- predict(full_model, newdata = Xh, interval = 'prediction', level = 0.95)
# Output the estimated sales and the prediction interval
cat("Estimated Sales (f(X)):", sales_prediction, "\n")
# Remove 'ShelveLoc' from the new data frame Xh
Xh <- data.frame(CompPrice = mean(Carseats$CompPrice),
Income = median(Carseats$Income),
Advertising = 15,
Population = 500,
Price = 50,
Age = 30,
Education = 10,
Urban = "Yes"
ShelveLoc = NULL)
# Remove 'ShelveLoc' from the new data frame Xh
Xh <- data.frame(CompPrice = mean(Carseats$CompPrice),
Income = median(Carseats$Income),
Advertising = 15,
Population = 500,
Price = 50,
Age = 30,
Education = 10,
Urban = "Yes",
ShelveLoc = NULL)
# Predict the sales using the full model
sales_prediction <- predict(full_model, newdata = Xh)
# Remove 'ShelveLoc' from the new data frame Xh
Xh <- data.frame(CompPrice = mean(Carseats$CompPrice),
Income = median(Carseats$Income),
Advertising = 15,
Population = 500,
Price = 50,
Age = 30,
Education = 10,
Urban = "Yes",
ShelveLoc = NULL)
# Predict the sales using the full model
sales_prediction <- predict(full_model, newdata = Xh)
head(Carseats)
# Remove 'ShelveLoc' from the new data frame Xh
Xh <- data.frame(CompPrice = mean(Carseats$CompPrice),
Income = median(Carseats$Income),
Advertising = 15,
Population = 500,
Price = 50,
ShelveLoc = NULL,
Age = 30,
Education = 10,
Urban = "Yes")
# Remove 'ShelveLoc' from the new data frame Xh
Xh <- data.frame(CompPrice = mean(Carseats$CompPrice),
Income = median(Carseats$Income),
Advertising = 15,
Population = 500,
Price = 50,
ShelveLoc = ,
Age = 30,
Education = 10,
Urban = "Yes")
####################1f.####################
# Fit the full model without ShelveLoc
model = lm(Sales~CompPrice+Income+Advertising+Population+Price+Age+Education+Urban+US, data=patient)
####################1f.####################
# Fit the full model without ShelveLoc
model = lm(Sales~CompPrice+Income+Advertising+Population+Price+Age+Education+Urban+US, data=Carseats)
Xh <- data.frame(CompPrice = mean(Carseats$CompPrice),
Income = median(Carseats$Income),
Advertising = 15,
Population = 500,
Price = 50,
Age = 30,
Education = 10,
Urban = "Yes",
US="Yes")
# Predict the sales using the full model
sales_prediction <- predict(full_model, newdata = Xh)
# Predict the sales using the full model
sales_prediction <- predict(model, newdata = Xh)
# Quantify the uncertainty surrounding the estimate
prediction_interval <- predict(full_model, newdata = Xh, interval = 'prediction', level = 0.95)
# Quantify the uncertainty surrounding the estimate
prediction_interval <- predict(model, newdata = Xh, interval = 'prediction', level = 0.95)
# Output the estimated sales and the prediction interval
cat("Estimated Sales (f(X)):", sales_prediction, "\n")
cat("Prediction Interval (95%): [", prediction_interval[1], ", ", prediction_interval[2], "]\n")
####################1f.####################
# Fit the full model without ShelveLoc
# Fit the full model
model <- lm(Sales ~ CompPrice + Income + Advertising + Population + Price + Age + Education + Urban + US, data = Carseats)
# Create a data frame for prediction
Xh <- data.frame(
CompPrice = mean(Carseats$CompPrice),
Income = median(Carseats$Income),
Advertising = 15,
Population = 500,
Price = 50,
Age = 30,
Education = 10,
Urban = factor("Yes", levels = levels(Carseats$Urban)),
US = factor("Yes", levels = levels(Carseats$US))
)
# Predict the sales using the full model
sales_prediction <- predict(model, newdata = Xh)
# Quantify the uncertainty surrounding the estimate
prediction_interval <- predict(model, newdata = Xh, interval = 'prediction', level = 0.95)
# Output the estimated sales and the prediction interval
cat("Estimated Sales (f(X)):", sales_prediction, "\n")
cat("Prediction Interval (95%): [", prediction_interval[1], ", ", prediction_interval[2], "]\n")
####################1g.####################
# Predict the mean response (Y) using the full model
mean_response_prediction <- predict(model, newdata = Xh, interval = 'confidence', level = 0.95)
# Output the estimated mean response and the confidence interval
cat("Estimated Mean Response (Y):", mean_response_prediction[1], "\n")
cat("Confidence Interval (95%): [", mean_response_prediction[2], ", ", mean_response_prediction[3], "]\n")
####################1f.####################
model <- lm(Sales ~ CompPrice + Income + Advertising + Population + Price + Age + Education + Urban + US, data = Carseats)
# Create a data frame for prediction
Xh <- data.frame(
CompPrice = mean(Carseats$CompPrice),
Income = median(Carseats$Income),
Advertising = 15,
Population = 500,
Price = 50,
Age = 30,
Education = 10,
Urban = factor("Yes", levels = levels(Carseats$Urban)),
US = factor("Yes", levels = levels(Carseats$US))
)
# Estimate f(X)
sales_prediction <- predict(model, newdata = Xh)
cat("Estimated f(X):", sales_prediction, "\n")
# Quantify the uncertainty surrounding the estimate
prediction_interval <- predict(model, newdata = Xh, interval = 'prediction', level = 0.95)
cat("95% Prediction Interval: [", prediction_interval[1], ", ", prediction_interval[2], "]\n")
# Estimate f(X)
sales_prediction <- predict(model, newdata = Xh)
cat("Estimated f(X):", sales_prediction, "\n")
# Quantify the uncertainty surrounding the estimate
prediction_interval <- predict(model, newdata = Xh, interval = 'prediction', level = 0.95)
cat("95% Prediction Interval: [", prediction_interval[1, "lwr"], ", ", prediction_interval[1, "upr"], "]\n")
predict(model,newdata=Xh)
predict(model,newdata=Xh,interval='prediction',level=0.95)
####################1g.####################
# Predict Y (Sales) and calculate prediction interval
prediction <- predict(model, newdata = Xh, interval = 'prediction', level = 0.95)
# Extract the prediction and interval values
predicted_sales <- prediction[1]
lower_bound <- prediction[2]
upper_bound <- prediction[3]
# Display the prediction and prediction interval
cat("The predicted sales (Y):", round(predicted_sales, 2), "\n")
cat("Prediction Interval (95%): [", round(lower_bound, 2), ",", round(upper_bound, 2), "]\n")
####################1g.####################
predict(model,newdata=Xh,interval='confidence',level=0.95)
####################1f.####################
model <- lm(Sales ~ CompPrice + Income + Advertising + Population + Price + Age + Education + Urban + US, data = Carseats)
# Create a data frame for prediction
Xh <- data.frame(
CompPrice = mean(Carseats$CompPrice),
Income = median(Carseats$Income),
Advertising = 15,
Population = 500,
Price = 50,
Age = 30,
Education = 10,
Urban = factor("Yes", levels = levels(Carseats$Urban)),
US = factor("Yes", levels = levels(Carseats$US))
)
predict(model,newdata=Xh)
predict(model,newdata=Xh,interval='confidence',level=0.95)
####################1h.####################
Xh <- data.frame(
CompPrice = mean(Carseats$CompPrice),
Income = median(Carseats$Income),
Advertising = 15,
Population = 500,
Price = 450,
Age = 30,
Education = 10,
Urban = factor("Yes", levels = levels(Carseats$Urban)),
US = factor("Yes", levels = levels(Carseats$US))
)
predict(model,newdata=Xh)
predict(model,newdata=Xh,interval='confidence',level=0.95)
