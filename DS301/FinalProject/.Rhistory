names(regfit.sum)
n = dim(df)[1]
p = rowSums(regfit.sum$which)
adjr2 = regfit.sum$adjr2
cp = regfit.sum$cp
rss = regfit.sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
cbind(p,adjr2,cp,AIC,BIC)
which.min(BIC)
which.min(AIC)
which.max(adjr2)
coef(regfit, 17)
str(College)
################## 3b. ####################
regfitFWD.sum = summary(regfit.fwd)
names(regfitFWD.sum)
n = dim(College)[1]
p = rowSums(regfitFWD.sum$which)
adjr2 = regfitFWD.sum$adjr2
cp = regfitFWD.sum$cp
rss = regfitFWD.sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
regfit.fwd = regsubsets(Apps~.,data=College,nvmax=17, method="forward")
regfit.bwd = regsubsets(Apps~.,data=College,nvmax=17, method="backward")
################## 3b. ####################
regfitFWD.sum = summary(regfit.fwd)
names(regfitFWD.sum)
n = dim(College)[1]
p = rowSums(regfitFWD.sum$which)
adjr2 = regfitFWD.sum$adjr2
cp = regfitFWD.sum$cp
rss = regfitFWD.sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
cbind(p,adjr2,cp,AIC,BIC)
which.min(BIC)
coef(regfit.fwd,10)
#forward selection
train_index = sort(sample(nrow(df),nrow(df)/2))
train = df[train_index,]
test = df[-train_index,]
regfit.fwd.train = regsubsets(BMI~., data = train, nvmax=17, method="forward")
val.errors = rep(NA, 17)
for(i in 1:17){
test.mat = model.matrix(BMI~., data=test)
coef.m = coef(regfit.fwd.train,id=i)
pred = test.mat[,names(coef.m)]%*%coef.m
val.errors[i] = mean((test$App-pred)^2)
}
which.min(val.errors)
coef(regfit.fwd.train,5)
which.min(val.errors)
################## 3d. ####################
train_index = sort(sample(nrow(College),nrow(College)*0.90))
train = College[train_index,]
test = College[-train_index,]
regfit.fwd.train = regsubsets(Apps~., data = train, nvmax=17, method="forward")
val.errors = rep(NA, 17)
for(i in 1:17){
test.mat = model.matrix(Apps~., data=test)
coef.m = coef(regfit.fwd.train,id=i)
pred = test.mat[,names(coef.m)]%*%coef.m
val.errors[i] = mean((test$App-pred)^2)
}
which.min(val.errors)
coef(regfit.fwd.train,5)
coef(regfit.fwd.train,4)
#forward selection
train_index = sort(sample(nrow(df),nrow(df)*0.90))
train_index = sort(sample(nrow(df),nrow(df)*0.60))
########### Linear Regression ###########
###########    Neha Maddali   ###########
library(leaps)
setwd("/Users/neham/Desktop/DS301/FinalProject")
df <- readr::read_csv('/Users/neham/Desktop/DS301/FinalProject/heart_2020_cleaned.csv')
df$HeartDisease = ifelse(df$HeartDisease == 'Yes', 1, 0)
df$Smoking = factor(df$Smoking)
df$AlcoholDrinking = factor(df$AlcoholDrinking)
df$Stroke = factor(df$Stroke)
df$DiffWalking = factor(df$DiffWalking)
df$Sex = factor(df$Sex)
df$Race = factor(df$Race)
df$Diabetic = factor(df$Diabetic)
df$PhysicalActivity = factor(df$PhysicalActivity)
df$GenHealth = factor(df$GenHealth)
df$Asthma = factor(df$Asthma)
df$KidneyDisease = factor(df$KidneyDisease)
df$SkinCancer = factor(df$SkinCancer)
df$AgeCategory = ifelse(df$AgeCategory == '18-24', 'Young',
ifelse(df$AgeCategory == '25-29', 'Young',
ifelse(df$AgeCategory == '30-34', 'Young',
ifelse(df$AgeCategory == '35-39', 'Young',
ifelse(df$AgeCategory == '40-44', 'Young',
ifelse(df$AgeCategory == '45-49', 'Old',
ifelse(df$AgeCategory == '50-54', 'Old',
ifelse(df$AgeCategory == '55-59', 'Old',
ifelse(df$AgeCategory == '60-64', 'Old',
ifelse(df$AgeCategory == '65-69', 'Old',
ifelse(df$AgeCategory == '70-74', 'Old',
ifelse(df$AgeCategory == '75-79', 'Old',
ifelse(df$AgeCategory == '80 or older', 'Old', 0)))))))))))))
df$AgeCategory = factor(df$AgeCategory)
train_index = sort(sample(nrow(df),nrow(df)*0.60))
train = df[train_index,]
test = df[-train_index,]
regfit.fwd.train = regsubsets(BMI~., data = train, nvmax=17, method="forward")
val.errors = rep(NA, 17)
for(i in 1:17){
test.mat = model.matrix(BMI~., data=test)
coef.m = coef(regfit.fwd.train,id=i)
pred = test.mat[,names(coef.m)]%*%coef.m
val.errors[i] = mean((test$App-pred)^2)
}
for(i in 1:17){
test.mat = model.matrix(BMI~., data=test)
coef.m = coef(regfit.fwd.train,id=i)
pred = test.mat[,names(coef.m)]%*%coef.m
val.errors[i] = mean((test$BMI-pred)^2)
}
which.min(val.errors)
coef(regfit.fwd.train,3)
coef(regfit.fwd.train,17)
train_index = sort(sample(nrow(df),nrow(df)/2))
train = df[train_index,]
test = df[-train_index,]
regfit.fwd.train = regsubsets(BMI~., data = train, nvmax=17, method="forward")
val.errors = rep(NA, 17)
for(i in 1:17){
test.mat = model.matrix(BMI~., data=test)
coef.m = coef(regfit.fwd.train,id=i)
pred = test.mat[,names(coef.m)]%*%coef.m
val.errors[i] = mean((test$BMI-pred)^2)
}
which.min(val.errors)
coef(regfit.fwd.train,17)
#best subset selection - find the best test mse
train_index = sort(sample(nrow(df),nrow(df)/2))
train = df[train_index,]
test = df[-train_index,]
regfit.train = regsubsets(BMI~., data = train, nvmax=17)
val.errors = rep(NA, 17)
for(i in 1:17){
test.mat = model.matrix(BMI~., data=test)
coef.m = coef(regfit.train,id=i)
pred = test.mat[,names(coef.m)]%*%coef.m
val.errors[i] = mean((test$BMI-pred)^2)
}
which.min(val.errors)
coef(regfit.train,17)
#model for all predictors
fit3 = lm(BMI~., data=df)
set.seed(1)
n = nrow(df)
train_index = sample(1:n,n/2,rep=FALSE)
train = df[train_index,]
test = df[-train_index,]
model_train = lm(BMI~.,data=train)
MSE_train = mean((train$BMI - model_train$fitted.values)^2)
MSE_train
predicted_values = predict(model_train,test)
MSE_test = mean((test$BMI - predicted_values)^2)
MSE_test
sum(fit3$residual^2)/(319795-(18+1))
#model for BMI as response and HeartDisease as predictor
set.seed(1)
n = nrow(df)
train_index = sample(1:n,n/2,rep=FALSE)
train = df[train_index,]
test = df[-train_index,]
model = lm(BMI~HeartDisease, data=df)
model_train = lm(BMI~HeartDisease,data=train)
MSE_train = mean((train$BMI - model_train$fitted.values)^2)
MSE_train
predicted_values = predict(model_train,test)
MSE_test = mean((test$BMI - predicted_values)^2)
MSE_test
sum(model$residual^2)/(319795-(18+1))
x = data.frame(HeartDisease=1)
predict(model,newdata=x,interval='confidence',level=0.99)
predict(model,newdata=x,interval='prediction',level=0.99)
#predict BMI given heart disease yes
predBMI = lm(BMI~HeartDisease, data=test)
#predict BMI given heart disease yes
predBMI = lm(BMI~., data=test)
summary(fit3)
str(df)
x <- data.frame(HeartDisease=1, AgeCategory=1, Stroke=2)
predict(predBMI,newdata=x)
x <- data.frame(HeartDisease=1, AgeCategory=1, Stroke=2)
predict(predBMI,newdata=x)
x <- data.frame(HeartDisease=1, AgeCategory=1, Stroke=2, Smoking = 2)
predict(predBMI,newdata=x)
#check for multicollinearity
model = lm(BMI ~., data=df)
library(car)
vif(model)
#check for multicollinearity
model = lm(BMI ~., data=df)
library(car)
vif_values <- vif(model)
barplot(vif_values, main = "VIF Values", horiz = TRUE, col = "steelblue")
abline(v = 4, lwd = 3, lty = 2)
#check for multicollinearity
model = lm(BMI ~., data=df)
library(car)
vif(model)
#multiple linear regression model on all predictors
fit = lm(BMI~., data=df)
n = nrow(df)
train_index = sample(1:n,n/2,rep=FALSE)
train = df[train_index,]
test = df[-train_index,]
model_train = lm(BMI~.,data=train)
MSE_train = mean((train$BMI - model_train$fitted.values)^2)
MSE_train
predicted_values = predict(model_train,test)
MSE_test = mean((test$BMI - predicted_values)^2)
MSE_test
sum(fit3$residual^2)/(319795-(18+1))
summary(fit)
#best subset selection on all predictors
regfit = regsubsets(BMI~.,data=df,nbest=1,nvmax=17)
regfit.sum = summary(regfit)
names(regfit.sum)
n = dim(df)[1]
p = rowSums(regfit.sum$which)
adjr2 = regfit.sum$adjr2
cp = regfit.sum$cp
rss = regfit.sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
cbind(p,adjr2,cp,AIC,BIC)
which.min(BIC)
which.min(AIC)
which.max(adjr2)
coef(regfit,17)
#best subset selection on all predictors
regfit = regsubsets(BMI~.,data=df,nbest=1,nvmax=18)
regfit.sum = summary(regfit)
n = dim(df)[1]
p = rowSums(regfit.sum$which)
adjr2 = regfit.sum$adjr2
cp = regfit.sum$cp
rss = regfit.sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
cbind(p,adjr2,cp,AIC,BIC)
which.min(BIC)
which.min(AIC)
which.max(adjr2)
coef(regfit,18)
#best subset selection on all predictors
regfit = regsubsets(BMI~.,data=df,nbest=1,nvmax=17)
regfit.sum = summary(regfit)
n = dim(df)[1]
p = rowSums(regfit.sum$which)
adjr2 = regfit.sum$adjr2
cp = regfit.sum$cp
rss = regfit.sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
cbind(p,adjr2,cp,AIC,BIC)
which.min(BIC)
which.min(AIC)
which.max(adjr2)
coef(regfit,17)
coef(regfit,1)
coef(regfit,2)
coef(regfit,3)
#best subset selection on all predictors
regfit = regsubsets(BMI~.,data=df,nbest=1,nvmax=NULL)
regfit.sum = summary(regfit)
n = dim(df)[1]
p = rowSums(regfit.sum$which)
adjr2 = regfit.sum$adjr2
cp = regfit.sum$cp
rss = regfit.sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
cbind(p,adjr2,cp,AIC,BIC)
which.min(BIC)
which.min(AIC)
which.max(adjr2)
coef(regfit,25)
coef(regfit,26)
summary_best_subset <- summary(regsubsets.out)
#best subset selection on all predictors
regfit = regsubsets(BMI~.,data=df,nbest=1,nvmax=NULL)
summary_best_subset <- summary(regsubsets.out)
regfit.sum$which[25,]
########### Linear Regression ###########
###########    Neha Maddali   ###########
library(leaps)
setwd("/Users/neham/Desktop/DS301/FinalProject")
df <- readr::read_csv('/Users/neham/Desktop/DS301/FinalProject/heart_2020_cleaned.csv')
df$HeartDisease = ifelse(df$HeartDisease == 'Yes', 1, 0)
df$Smoking = factor(df$Smoking)
df$AlcoholDrinking = factor(df$AlcoholDrinking)
df$Stroke = factor(df$Stroke)
df$DiffWalking = factor(df$DiffWalking)
df$Sex = factor(df$Sex)
df$Race = factor(df$Race)
df$Diabetic = factor(df$Diabetic)
df$PhysicalActivity = factor(df$PhysicalActivity)
df$GenHealth = factor(df$GenHealth)
df$Asthma = factor(df$Asthma)
df$KidneyDisease = factor(df$KidneyDisease)
df$SkinCancer = factor(df$SkinCancer)
df$AgeCategory = ifelse(df$AgeCategory == '18-24', 'Young',
ifelse(df$AgeCategory == '25-29', 'Young',
ifelse(df$AgeCategory == '30-34', 'Young',
ifelse(df$AgeCategory == '35-39', 'Young',
ifelse(df$AgeCategory == '40-44', 'Young',
ifelse(df$AgeCategory == '45-49', 'Old',
ifelse(df$AgeCategory == '50-54', 'Old',
ifelse(df$AgeCategory == '55-59', 'Old',
ifelse(df$AgeCategory == '60-64', 'Old',
ifelse(df$AgeCategory == '65-69', 'Old',
ifelse(df$AgeCategory == '70-74', 'Old',
ifelse(df$AgeCategory == '75-79', 'Old',
ifelse(df$AgeCategory == '80 or older', 'Old', 0)))))))))))))
df$AgeCategory = factor(df$AgeCategory)
#check for multicollinearity -- there is no multicollinearity
model = lm(BMI ~., data=df)
library(car)
vif(model)
#multiple linear regression model on all predictors
fit = lm(BMI~., data=df)
n = nrow(df)
train_index = sample(1:n,n/2,rep=FALSE)
train = df[train_index,]
test = df[-train_index,]
model_train = lm(BMI~.,data=train)
MSE_train = mean((train$BMI - model_train$fitted.values)^2)
predicted_values = predict(model_train,test)
MSE_test = mean((test$BMI - predicted_values)^2)
MSE_test
sum(fit3$residual^2)/(319795-(18+1))
sum(fit$residual^2)/(319795-(18+1))
summary(fit)
#best subset selection on all predictors
regfit = regsubsets(BMI~.,data=df,nbest=1,nvmax=NULL)
regfit.sum = summary(regfit)
n = dim(df)[1]
p = rowSums(regfit.sum$which)
adjr2 = regfit.sum$adjr2
cp = regfit.sum$cp
rss = regfit.sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
cbind(p,adjr2,cp,AIC,BIC)
which.min(BIC)
which.min(AIC)
regfit.sum$which[25,]
best.model <- lm(BMI~HeartDisease+SmokingYes)
best.model <- lm(BMI~HeartDisease+SmokingYes, data=df)
best.model <- lm(BMI~HeartDisease+Smoking+AlcoholDrinking+Stroke+
PhysicalHealth+MentalHealth+DiffWalking+Sex+AgeCategory+
Race+Diabetic+PhysicalActivity+GenHealth+SleepTime+Asthma+
KidneyDisease+SkinCancer, data=df)
summary(best.model)
#best subset selection - find the best test mse
train_index = sort(sample(nrow(df),nrow(df)/2))
train = df[train_index,]
test = df[-train_index,]
regfit.train = regsubsets(BMI~., data = train, nvmax=17)
regfit.train = regsubsets(BMI~., data = train, nvmax=NULL)
val.errors = rep(NA, 17)
val.errors = rep(NA, NULL)
val.errors = rep(NA, 30)
for(i in 1:30){
test.mat = model.matrix(BMI~., data=test)
coef.m = coef(regfit.train,id=i)
pred = test.mat[,names(coef.m)]%*%coef.m
val.errors[i] = mean((test$BMI-pred)^2)
}
which.min(val.errors)
val.errors = rep(NA, 26)
for(i in 1:26){
test.mat = model.matrix(BMI~., data=test)
coef.m = coef(regfit.train,id=i)
pred = test.mat[,names(coef.m)]%*%coef.m
val.errors[i] = mean((test$BMI-pred)^2)
}
which.min(val.errors)
coef(regfit.train,26)
coef(regfit.train,25)
regfit.sum$which[25,]
str(df)
x <- data.frame(HeartDisease=1, Smoking=2, AlcoholDrinking=2, Stroke=2,
DiffWalking=2,Sex=2,AgeCategory=2, Diabetic=2, PhysicalActivity=2,
Asthma=2,KidneyDisease=1,SkinCancer=2)
#predict BMI
predBMI = lm(BMI~., data=test)
x <- data.frame(HeartDisease=1, Smoking=2, AlcoholDrinking=2, Stroke=2,
DiffWalking=2,Sex=2,AgeCategory=2, Diabetic=2, PhysicalActivity=2,
Asthma=2,KidneyDisease=1,SkinCancer=2)
predict(predBMI,newdata=x)
x <- data.frame(HeartDisease=1, Smoking=2, AlcoholDrinking=2, Stroke=2,
DiffWalking=2,Sex=2,AgeCategory=2, Diabetic=2, PhysicalActivity=2,
Asthma=2,KidneyDisease=1,SkinCancer=2,PhysicalHealth=0)
predict(predBMI,newdata=x)
x <- data.frame(HeartDisease=1, Smoking=2, AlcoholDrinking=2, Stroke=2,
DiffWalking=2,Sex=2,AgeCategory=2, Diabetic=2, PhysicalActivity=2,
Asthma=2,KidneyDisease=1,SkinCancer=2,PhysicalHealth=0,MentalHealth=0)
predict(predBMI,newdata=x)
x <- data.frame(HeartDisease=1, Smoking=2, AlcoholDrinking=2, Stroke=2,
DiffWalking=2,Sex=2,AgeCategory=2, Diabetic=2, PhysicalActivity=2,
Asthma=2,KidneyDisease=1,SkinCancer=2,PhysicalHealth=0,MentalHealth=0,
Race=6)
predict(predBMI,newdata=x)
x <- data.frame(HeartDisease=1, Smoking=2, AlcoholDrinking=2, Stroke=2,
DiffWalking=2,Sex=2,AgeCategory=2, Diabetic=2, PhysicalActivity=2,
Asthma=2,KidneyDisease=1,SkinCancer=2,PhysicalHealth=0,MentalHealth=0,
Race=6,GenHealth=1)
predict(predBMI,newdata=x)
x <- data.frame(HeartDisease=1, Smoking=2, AlcoholDrinking=2, Stroke=2,
DiffWalking=2,Sex=2,AgeCategory=2, Diabetic=2, PhysicalActivity=2,
Asthma=2,KidneyDisease=1,SkinCancer=2,PhysicalHealth=0,MentalHealth=0,
Race=6,GenHealth=1,SleepTime=8)
predict(predBMI,newdata=x)
#predict BMI
predBMI = lm(BMI~., data=test)
x <- data.frame(HeartDisease=1, Smoking=2, AlcoholDrinking=2, Stroke=2,
DiffWalking=2,Sex=2,AgeCategory=2, Diabetic=2, PhysicalActivity=2,
Asthma=2,KidneyDisease=1,SkinCancer=2,PhysicalHealth=0,MentalHealth=0,
Race=6,GenHealth=1,SleepTime=8)
predict(predBMI,newdata=x)
#check for multicollinearity -- there is no multicollinearity
model = lm(HeartDisease ~., data=df)
library(car)
vif(model)
#best subset selection - find the best test mse
train_index = sort(sample(nrow(df),nrow(df)/2))
train = df[train_index,]
test = df[-train_index,]
regfit.train = regsubsets(BMI~., data = train, nvmax=NULL)
val.errors = rep(NA, 26)
for(i in 1:26){
test.mat = model.matrix(BMI~., data=test)
coef.m = coef(regfit.train,id=i)
pred = test.mat[,names(coef.m)]%*%coef.m
val.errors[i] = mean((test$BMI-pred)^2)
}
which.min(val.errors)
val.errors
#multiple linear regression model on all predictors
fit = lm(BMI~., data=df)
summary(fit)
summary)fit
summary(fit)
#multiple linear regression model on all predictors
fit = lm(BMI~., data=df)
n = nrow(df)
train_index = sample(1:n,n/2,rep=FALSE)
train = df[train_index,]
test = df[-train_index,]
model_train = lm(BMI~.,data=train)
MSE_train = mean((train$BMI - model_train$fitted.values)^2)
predicted_values = predict(model_train,test)
MSE_test = mean((test$BMI - predicted_values)^2)
MSE_test
sum(fit$residual^2)/(319795-(18+1))
#best subset selection on all predictors
regfit = regsubsets(BMI~.,data=df,nbest=1,nvmax=17)
regfit.sum = summary(regfit)
n = dim(df)[1]
p = rowSums(regfit.sum$which)
adjr2 = regfit.sum$adjr2
cp = regfit.sum$cp
rss = regfit.sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
cbind(p,adjr2,cp,AIC,BIC)
which.min(BIC)
which.min(AIC)
which.max(adjr2)
regfit.sum$which[17,]
coef(regfit,17)
coef(regfit,17)
coef(regfit,17)
coef(regfit,17)
regfit.sum$which[17,]
regfit.sum$which[17,]
regfit.sum$which[17,]
#best subset selection - find the best test mse
train_index = sort(sample(nrow(df),nrow(df)/2))
train = df[train_index,]
test = df[-train_index,]
regfit.train = regsubsets(BMI~., data = train, nvmax=26)
val.errors = rep(NA, 26)
for(i in 1:26){
test.mat = model.matrix(BMI~., data=test)
coef.m = coef(regfit.train,id=i)
pred = test.mat[,names(coef.m)]%*%coef.m
val.errors[i] = mean((test$BMI-pred)^2)
}
which.min(val.errors)
coef(regfit.train,25)
regfit.train = regsubsets(BMI~., data = train, nvmax=17)
val.errors = rep(NA, 17)
for(i in 1:17){
test.mat = model.matrix(BMI~., data=test)
coef.m = coef(regfit.train,id=i)
pred = test.mat[,names(coef.m)]%*%coef.m
val.errors[i] = mean((test$BMI-pred)^2)
}
which.min(val.errors)
coef(regfit.train,17)
val.errors
