powerone<- power
powertwo<- power/2
switch(alternative,
two.sided = ceiling((qnorm(powertwo)*sepa
+ qnorm(probtwo)*sep0)^2/diff^2),
greater = ceiling((qnorm(powerone)*sepa
+ qnorm(probone)*sep0)^2/diff^2),
less = ceiling((qnorm(powerone)*sepa
+ qnorm(probone)*sep0)^2/diff^2))
}
n<- 100
p<- 0.16
y<- rbinom(100000, n, p)
phat<- y/n
mean(phat) #mean
var(phat) #variance
sd(phat) #standard deviation
summary(phat) #five number summary (and mean)
##Required Libraries
library(ggplot2)
##Code to create the exact sampling distribution for p-hat
##based on the Binomial distribution - change the values of n and p
##to get a different distribution
n<- 250
p<- 0.1
pphat<- c(0:n)/n
probpphat<- dbinom(0:n, n, p)
sdpphat<- as.data.frame(cbind(pphat, probpphat))
ggplot(sdpphat, aes(x = pphat, y = probpphat))+
geom_bar(stat="identity", fill = "blue", colour = "black")+
theme_bw()+
theme(axis.title.y = element_text(size = rel(1.4)),
axis.title.x = element_text(size = rel(1.4)),
axis.text.x = element_text(size = rel(1.6)),
axis.text.y = element_text(size = rel(1.6)),
plot.title = element_text(hjust=0.5, size = rel(2)))+
labs(x = "Sample Proportion",
y = "Probability",
title = "Distribution of Sample Proportion")
##Code to simulate sampling distribution for p-hat - change the values
##of n and p to get a different distribution
n<- 1000
p<- 0.95
y<- rbinom(100000, n, p)
phat<- y/n
sdphat<-as.data.frame(cbind(y, phat))
ggplot(sdphat, aes(x=phat))+
geom_histogram(binwidth=0.01, fill = "blue", colour = "black")+
theme_bw()+
theme(axis.title.y = element_text(size = rel(1.4)),
axis.title.x = element_text(size = rel(1.4)),
axis.text.x = element_text(size = rel(1.6)),
axis.text.y = element_text(size = rel(1.6)),
plot.title = element_text(hjust=0.5, size = rel(2)))+
labs(x = "Sample Proportion (p-hat)",
y = "Number of Samples",
title = "Approx. Sampling Distribution of p-hat")
##Investigate summarizes of sample proportions p-hat
mean(phat) #mean
var(phat) #variance
sd(phat) #standard deviation
##Problem 1
p <- 0.16  # Proportion of Green milk chocolate M&Ms
n <- 100   # Sample size
##Part b
prob_gt_20_percent <- 1 - pnorm(0.20, p, sqrt(p * (1 - p) / n))
prob_gt_20_percent
##Part c
pnorm(0.10, p, sqrt(p * (1 - p) / n))
##Part a
dogs_data <- read.csv("Dogs.csv", header = TRUE)
dogs_data
dogs_counts <- count(dogs_data, var = 'PawPreference')
dogs_counts <- count(dogs_data, var = 'Paw')
dogs_table <- mutate(dogs_counts,
prop = freq/sum(dogs_counts[2]))
dogs_table <- rbind(dogs_table, data.frame(PawPreference = 'Total',
t(colSums(dogs_table[, -1]))))
dogs_counts <- count(dogs_data, var = 'Paw')
dogs_table <- mutate(dogs_counts, prop = freq / sum(dogs_counts$freq))
dogs_table <- rbind(dogs_table, data.frame(Paw = 'Total', t(colSums(dogs_table[, -1]))))
print("Summary Table:")
print(dogs_table)
ggplot(dogs_data, aes(x = Paw)) +
geom_bar(fill = "blue", colour = "black") +
labs(x = "Paw", y = "Number of Occurrences", title = "Summary of Dog's Paw Preference") +
theme_bw() +
theme(
axis.title.y = element_text(size = rel(1.4)),
axis.title.x = element_text(size = rel(1.4)),
axis.text.x = element_text(size = rel(1.2)),
axis.text.y = element_text(size = rel(1.2)),
plot.title = element_text(hjust = 0.5, size = rel(1.6))
)
##Part b
test_result <- binom.test(sum(dogs_data$Paw == "Right"), length(dogs_data$Paw), p = 0.5, alternative = "greater")
test_result
##Part b
binom.test(sum(dogs_data$Paw == "Right"), length(dogs_data$Paw), p = 0.5, alternative = "greater")
##Obtain the binomial test for the ESP data
binom.test(15, 20, 0.5, alternative = "greater")
##Part b
test_result <- binom.test(sum(dogs_data$Paw == "Right"), length(dogs_data$Paw), p = 0.5, alternative = "greater")
cat("Null Hypothesis = The dog does not favor its right paw when 'shaking hands'.\n")
cat("Alternative Hypothesis = The dog favors its right paw when 'shaking hands'.\n")
cat("Test Statistic =", sum(dogs_data$Paw == "Right"), "\n")
cat("P-value =", test_result$p.value, "\n")
##Part b
test_result <- binom.test(sum(dogs_data$Paw == "Right"), length(dogs_data$Paw), p = 0.5, alternative = "greater")
test_result
if (test_result$p.value < 0.05) {
cat("Conclusion = Reject the null hypothesis. There is evidence that the dog favors its right paw when 'shaking hands'.\n")
} else {
cat("Conclusion = Fail to reject the null hypothesis. There is not enough evidence to conclude that the dog favors its right paw when 'shaking hands'.\n")
}
##Part c
library(stats)
## Find the rejection region for α = 0.05
alpha <- 0.05
rejection_region <- qbinom(1 - alpha, length(dogs_data$Paw), 0.5, lower.tail = FALSE)
## Display results
cat("Rejection Region for α =", alpha, ":", rejection_region, "or more occurrences of the right paw.\n")
rejection_region
##Calculate the power of the score test for the ingots data for p_a = 0.14
powerprop.test(400, 0.2, 0.14, alternative = "less", 0.05)
##Part d
## Significance level (alpha)
alpha <- 0.05
## Compare with the actual p-value
if (test_result$p.value < alpha) {
cat("Observed Type I Error Rate =", alpha, "\n")
} else {
cat("Observed Type I Error Rate =", test_result$p.value, "\n")
}
##Part e
probabilities <- c(0.6, 0.75, 0.9)
## Calculate the power for each probability
for (prob in probabilities) {
power <- sum(dbinom(rejection_region:length(dogs_data$Paw), length(dogs_data$Paw), prob))
cat("Power for p =", prob, ":", power, "\n")
}
##Part a
antacid_data <- read.csv("Antacid.csv", header = TRUE)
##Part a
antacid_data <- read.csv("Antacid.csv", header = TRUE)
antacid_counts <- count(antacid_data, var = 'Relief')
antacid_table <- mutate(antacid_counts, prop = freq / sum(antacid_counts$freq))
antacid_table <- rbind(antacid_table, data.frame(Relief = 'Total', t(colSums(antacid_table[, -1]))))
print("Summary Table:")
print(antacid_table)
## Bar graph
ggplot(antacid_data, aes(x = Relief)) +
geom_bar(fill = "blue", colour = "black") +
labs(x = "Relief", y = "Number of Occurrences", title = "Summary of Antacid Relief") +
theme_bw() +
theme(
axis.title.y = element_text(size = rel(1.4)),
axis.title.x = element_text(size = rel(1.4)),
axis.text.x = element_text(size = rel(1.2)),
axis.text.y = element_text(size = rel(1.2)),
plot.title = element_text(hjust = 0.5, size = rel(1.6))
)
##Part c
test_result <- prop.test(sum(antacid_data$Relief == "Yes"), length(antacid_data$Relief), p = 0.75, alternative = "greater")
cat("Null Hypothesis: The new formula is not better than the old formula.\n")
cat("Alternative Hypothesis: The new formula is better than the old formula.\n")
cat("Test Statistic =", test_result$statistic, "\n")
cat("P-value =", test_result$p.value, "\n")
## Conclusion based on the p-value
if (test_result$p.value < 0.05) {
cat("Conclusion: Reject the null hypothesis. There is evidence that the new formula is better than the old formula.\n")
} else {
cat("Conclusion: Fail to reject the null hypothesis. There is not enough evidence to suggest that the new formula is better than the old formula.\n")
}
##Part d
probabilities <- c(0.8, 0.85, 0.9)
alpha_values <- c(0.01, 0.05, 0.1)
for (prob in probabilities) {
for (alpha in alpha_values) {
rejection_region <- qnorm(1 - alpha, test_result$parameter * prob, sqrt(test_result$parameter * prob * (1 - prob)))
power <- sum(dnorm(rejection_region:length(antacid_data$Relief), test_result$parameter * prob, sqrt(test_result$parameter * prob * (1 - prob))))
cat("Power for p =", prob, "and alpha =", alpha, ":", power, "\n")
}
}
##Part f
p0 <- 0.8  # Current proportion
pa <- 0.85  # Expected proportion under the alternative hypothesis
alpha <- 0.05  # Significance level
power <- 0.9  # Desired power
effect_size <- 0.05  # Improvement in proportion
# Calculate required sample size
required_sample_size <- npowerprop.test(p0, pa, alternative = "greater", alpha, power)
required_sample_size <- ceiling(required_sample_size)
# Display the result
cat("Required sample size:", required_sample_size, "\n")
##HW 2 Template
##Necessary Libraries
library(plyr)
library(ggplot2)
##Required Functions
powerprop.test<- function(n, p0, pa, alternative, alpha){
diff<- p0-pa
adiff<- abs(diff)
sep0<- sqrt(p0*(1-p0)/n)
sepa<- sqrt(pa*(1-pa)/n)
probone<- 1 - alpha
probtwo<- 1 - alpha/2
switch(alternative,
two.sided =
2*(1 - pnorm((adiff + qnorm(probtwo)*sep0)/sepa)),
greater = 1 - pnorm((diff + qnorm(probone)*sep0)/sepa),
less = pnorm((diff - qnorm(probone)*sep0)/sepa))
}
npowerprop.test<- function(p0, pa, alternative, alpha, power){
diff<- p0-pa
sep0<- sqrt(p0*(1-p0))
sepa<- sqrt(pa*(1-pa))
probone<- 1 - alpha
probtwo<- 1 - alpha/2
powerone<- power
powertwo<- power/2
switch(alternative,
two.sided = ceiling((qnorm(powertwo)*sepa
+ qnorm(probtwo)*sep0)^2/diff^2),
greater = ceiling((qnorm(powerone)*sepa
+ qnorm(probone)*sep0)^2/diff^2),
less = ceiling((qnorm(powerone)*sepa
+ qnorm(probone)*sep0)^2/diff^2))
}
##Problem 1
p <- 0.16  # Proportion of Green milk chocolate M&Ms
n <- 100   # Sample size
##Part b
1 - pnorm(0.20, p, sqrt(p * (1 - p) / n))
##Part c
pnorm(0.10, p, sqrt(p * (1 - p) / n))
##Problem 2
##Part a
dogs_data <- read.csv("Dogs.csv", header = TRUE)
dogs_counts <- count(dogs_data, var = 'Paw')
dogs_table <- mutate(dogs_counts, prop = freq / sum(dogs_counts$freq))
dogs_table <- rbind(dogs_table, data.frame(Paw = 'Total', t(colSums(dogs_table[, -1]))))
print(dogs_table)
ggplot(dogs_data, aes(x = Paw)) +
geom_bar(fill = "blue", colour = "black") +
labs(x = "Paw", y = "Number of Occurrences", title = "Summary of Dog's Paw Preference") +
theme_bw() +
theme(
axis.title.y = element_text(size = rel(1.4)),
axis.title.x = element_text(size = rel(1.4)),
axis.text.x = element_text(size = rel(1.2)),
axis.text.y = element_text(size = rel(1.2)),
plot.title = element_text(hjust = 0.5, size = rel(1.6))
)
##Part b
test_result <- binom.test(sum(dogs_data$Paw == "Right"), length(dogs_data$Paw), p = 0.5, alternative = "greater")
cat("Test Statistic =", sum(dogs_data$Paw == "Right"), "\n")
cat("P-value =", test_result$p.value, "\n")
##Part c
library(stats)
alpha <- 0.05
rejection_region <- qbinom(1 - alpha, length(dogs_data$Paw), 0.5, lower.tail = FALSE)
rejection_region
##Part d
if (test_result$p.value < alpha) {
cat("Observed Type I Error Rate =", alpha, "\n")
} else {
cat("Observed Type I Error Rate =", test_result$p.value, "\n")
}
##Part e
probabilities <- c(0.6, 0.75, 0.9)
for (prob in probabilities) {
power <- sum(dbinom(rejection_region:length(dogs_data$Paw), length(dogs_data$Paw), prob))
cat("Power for p =", prob, ":", power, "\n")
}
##Problem 3
##Part a
antacid_data <- read.csv("Antacid.csv", header = TRUE)
antacid_counts <- count(antacid_data, var = 'Relief')
antacid_table <- mutate(antacid_counts, prop = freq / sum(antacid_counts$freq))
antacid_table <- rbind(antacid_table, data.frame(Relief = 'Total', t(colSums(antacid_table[, -1]))))
print("Summary Table:")
print(antacid_table)
## Bar graph
ggplot(antacid_data, aes(x = Relief)) +
geom_bar(fill = "blue", colour = "black") +
labs(x = "Relief", y = "Number of Occurrences", title = "Summary of Antacid Relief") +
theme_bw() +
theme(
axis.title.y = element_text(size = rel(1.4)),
axis.title.x = element_text(size = rel(1.4)),
axis.text.x = element_text(size = rel(1.2)),
axis.text.y = element_text(size = rel(1.2)),
plot.title = element_text(hjust = 0.5, size = rel(1.6))
)
##Part c
test_result <- prop.test(sum(antacid_data$Relief == "Yes"), length(antacid_data$Relief), p = 0.75, alternative = "greater")
test_result
##Required Libraries
library(ggplot2)
library(plyr)
##Required Functions
powerprop.test<- function(n, p0, pa, alternative, alpha){
diff<- p0-pa
adiff<- abs(diff)
sep0<- sqrt(p0*(1-p0)/n)
sepa<- sqrt(pa*(1-pa)/n)
probone<- 1 - alpha
probtwo<- 1 - alpha/2
switch(alternative,
two.sided =
2*(1 - pnorm((adiff + qnorm(probtwo)*sep0)/sepa)),
greater = 1 - pnorm((diff + qnorm(probone)*sep0)/sepa),
less = pnorm((diff - qnorm(probone)*sep0)/sepa))
}
npowerprop.test<- function(p0, pa, alternative, alpha, power){
diff<- p0-pa
sep0<- sqrt(p0*(1-p0))
sepa<- sqrt(pa*(1-pa))
probone<- 1 - alpha
probtwo<- 1 - alpha/2
powerone<- power
powertwo<- power/2
switch(alternative,
two.sided = ceiling((qnorm(powertwo)*sepa
+ qnorm(probtwo)*sep0)^2/diff^2),
greater = ceiling((qnorm(powerone)*sepa
+ qnorm(probone)*sep0)^2/diff^2),
less = ceiling((qnorm(powerone)*sepa
+ qnorm(probone)*sep0)^2/diff^2))
}
##Read in the data on ESP test from the file esp.csv
espdata <- read.csv(file.choose(), header = T)
##Read in the data on the ingots from the file ingots.csv
ingotsdata <- read.csv(file.choose(), header = T)
##Obtain the summary table for the ESP data
esp.counts<- count(espdata, var = 'Response')
esp.table<- mutate(esp.counts,
prop = freq/sum(esp.counts[2]))
esp.table<- rbind(esp.table, data.frame(Response='Total',
t(colSums(esp.table[, -1]))))
esp.table
##Obtain the bar graph for the ESP data
ggplot(espdata, aes(x=Response))+
geom_bar(fill = "blue", colour = "black")+
labs(x = "Response",
y = "Number of Attempts",
title = "Summary of ESP Test")+
theme_bw()+
theme(axis.title.y = element_text(size = rel(1.4)),
axis.title.x = element_text(size = rel(1.4)),
axis.text.x = element_text(size = rel(1.2)),
axis.text.y = element_text(size = rel(1.2)),
plot.title = element_text(hjust=0.5, size = rel(1.6)))
##Obtain the summary table for the ingots data
ingots.counts<- count(ingotsdata, var = 'Status')
ingots.table<- mutate(ingots.counts,
prop = freq/sum(ingots.counts[2]))
ingots.table<- rbind(ingots.table, data.frame(Status='Total',
t(colSums(ingots.table[, -1]))))
ingots.table
##Obtain the bar graph for the ingots data
ggplot(ingotsdata, aes(x=Status))+
geom_bar(fill = "blue", colour = "black")+
labs(x = "Status",
y = "Number of Ingots",
title = "Summary of Ingots Status")+
theme_bw()+
theme(axis.title.y = element_text(size = rel(1.4)),
axis.title.x = element_text(size = rel(1.4)),
axis.text.x = element_text(size = rel(1.2)),
axis.text.y = element_text(size = rel(1.2)),
plot.title = element_text(hjust=0.5, size = rel(1.6)))
##Obtain the binomial test for the ESP data
binom.test(15, 20, 0.5, alternative = "greater")
##Calculate the power of the binomial test for the ESP data
##for different values of p_a
sum(dbinom(15:20, 20, 0.6))
sum(dbinom(15:20, 20, 0.75))
sum(dbinom(15:20, 20, 0.9))
##Plot the power curve for the binomial test for the ESP data
pa<- c(50:100)/100
powers<- rep(99, length(pa))
for (i in 1:length(pa)) powers[i]<- sum(dbinom(15:20, 20, pa[i]))
powerplot<- as.data.frame(cbind(pa, powers))
ggplot(powerplot, aes(x = pa, y = powers))+
geom_line()+
labs(x = "True Population Proportion",
y = "Probability of Rejecting the Null Hypothesis",
title = "Power Curve for ESP Test")+
theme_bw()+
theme(axis.title.y = element_text(size = rel(1.4)),
axis.title.x = element_text(size = rel(1.4)),
axis.text.x = element_text(size = rel(1.2)),
axis.text.y = element_text(size = rel(1.2)),
plot.title = element_text(hjust=0.5, size = rel(1.6)))
##HW 2 Template
##Necessary Libraries
library(plyr)
library(ggplot2)
##Required Functions
powerprop.test<- function(n, p0, pa, alternative, alpha){
diff<- p0-pa
adiff<- abs(diff)
sep0<- sqrt(p0*(1-p0)/n)
sepa<- sqrt(pa*(1-pa)/n)
probone<- 1 - alpha
probtwo<- 1 - alpha/2
switch(alternative,
two.sided =
2*(1 - pnorm((adiff + qnorm(probtwo)*sep0)/sepa)),
greater = 1 - pnorm((diff + qnorm(probone)*sep0)/sepa),
less = pnorm((diff - qnorm(probone)*sep0)/sepa))
}
npowerprop.test<- function(p0, pa, alternative, alpha, power){
diff<- p0-pa
sep0<- sqrt(p0*(1-p0))
sepa<- sqrt(pa*(1-pa))
probone<- 1 - alpha
probtwo<- 1 - alpha/2
powerone<- power
powertwo<- power/2
switch(alternative,
two.sided = ceiling((qnorm(powertwo)*sepa
+ qnorm(probtwo)*sep0)^2/diff^2),
greater = ceiling((qnorm(powerone)*sepa
+ qnorm(probone)*sep0)^2/diff^2),
less = ceiling((qnorm(powerone)*sepa
+ qnorm(probone)*sep0)^2/diff^2))
}
##Part a
antacid_data <- read.csv("Antacid.csv", header = TRUE)
antacid_counts <- count(antacid_data, var = 'Relief')
antacid_table <- mutate(antacid_counts, prop = freq / sum(antacid_counts$freq))
antacid_table <- rbind(antacid_table, data.frame(Relief = 'Total', t(colSums(antacid_table[, -1]))))
print("Summary Table:")
print(antacid_table)
## Bar graph
ggplot(antacid_data, aes(x = Relief)) +
geom_bar(fill = "blue", colour = "black") +
labs(x = "Relief", y = "Number of Occurrences", title = "Summary of Antacid Relief") +
theme_bw() +
theme(
axis.title.y = element_text(size = rel(1.4)),
axis.title.x = element_text(size = rel(1.4)),
axis.text.x = element_text(size = rel(1.2)),
axis.text.y = element_text(size = rel(1.2)),
plot.title = element_text(hjust = 0.5, size = rel(1.6))
)
##Part c
prop.test(312, 400, p=0.75, alternative = "greater", correct = F)
sqrt(1.92)
##Part a
dogs_data <- read.csv("Dogs.csv", header = TRUE)
dogs_counts <- count(dogs_data, var = 'Paw')
dogs_table <- mutate(dogs_counts, prop = freq / sum(dogs_counts$freq))
dogs_table <- rbind(dogs_table, data.frame(Paw = 'Total', t(colSums(dogs_table[, -1]))))
print(dogs_table)
ggplot(dogs_data, aes(x = Paw)) +
geom_bar(fill = "blue", colour = "black") +
labs(x = "Paw", y = "Number of Occurrences", title = "Summary of Dog's Paw Preference") +
theme_bw() +
theme(
axis.title.y = element_text(size = rel(1.4)),
axis.title.x = element_text(size = rel(1.4)),
axis.text.x = element_text(size = rel(1.2)),
axis.text.y = element_text(size = rel(1.2)),
plot.title = element_text(hjust = 0.5, size = rel(1.6))
)
##Part b
binom.test(10,15,0.5, alternative="greater") #correct
##Part c
sum(dbinom(11:15, 15, 0.5))  #correct
sum(dbinom(12:15, 15, 0.5))  #correct
##Part d
sum (dbinom(12:15, 15, 0.5))  #correct
##Part e
sum(dbinom(12:15, 15, 0.6)) #correct
sum(dbinom(12:15, 15, 0.75))  #correct
sum(dbinom(12:15, 15, 0.9))  #correct
##Part a
antacid_data <- read.csv("Antacid.csv", header = TRUE)
antacid_counts <- count(antacid_data, var = 'Relief')
antacid_table <- mutate(antacid_counts, prop = freq / sum(antacid_counts$freq))
antacid_table <- rbind(antacid_table, data.frame(Relief = 'Total', t(colSums(antacid_table[, -1]))))
print("Summary Table:")
print(antacid_table)
## Bar graph
ggplot(antacid_data, aes(x = Relief)) +
geom_bar(fill = "blue", colour = "black") +
labs(x = "Relief", y = "Number of Occurrences", title = "Summary of Antacid Relief") +
theme_bw() +
theme(
axis.title.y = element_text(size = rel(1.4)),
axis.title.x = element_text(size = rel(1.4)),
axis.text.x = element_text(size = rel(1.2)),
axis.text.y = element_text(size = rel(1.2)),
plot.title = element_text(hjust = 0.5, size = rel(1.6))
)
##Part c
prop.test(312, 400, p=0.75, alternative = "greater", correct = F)
##Part d
powerprop.test(n=400, p0 = 0.75, pa=0.8, alternative='greater', alpha=0.1)
powerprop.test(n=400, p0 = 0.75, pa=0.85, alternative='greater', alpha=0.1)
powerprop.test(n=400, p0 = 0.75, pa=0.9, alternative='greater', alpha=0.1)
powerprop.test(n=400, p0 = 0.75, pa=0.8, alternative='greater', alpha=0.05)
powerprop.test(n=400, p0 = 0.75, pa=0.85, alternative='greater', alpha=0.05)
powerprop.test(n=400, p0 = 0.75, pa=0.9, alternative='greater', alpha=0.05)
powerprop.test(n=400, p0 = 0.75, pa=0.8, alternative='greater', alpha=0.01)
powerprop.test(n=400, p0 = 0.75, pa=0.85, alternative='greater', alpha=0.01)
##Part f
npowerprop.test(p0=0.8, pa=0.85, alternative='greater', alpha=0.05, power=0.9)
