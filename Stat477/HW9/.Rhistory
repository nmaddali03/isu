##Problem 1 - Fit Model for AfterLife
life_data<- read.csv(file.choose(), header=T)
library(ggplot2)
library(nnet)
library(VGAM)
library(data.table)
str(life_data)
life_data$AfterLife<- factor(life_data$AfterLife, c("Y", "N", "U"))
life_data$Afterlife<- factor(life_data$Afterlife, c("Y", "N", "U"))
lifemodel<- multinom(Afterlife ~ Gender+Race, data = life_data)
summary(lifemodel)
lifemodel<- multinom(Afterlife ~ Gender+Race, data = life_data)
unique(life_data$Race)
life_data$Gender<- factor(life_data$Gender, c("F", "M"))
life_data$Race<- factor(life_data$Gender, c("W", "B"))
lifemodel<- multinom(Afterlife ~ Gender+Race, data = life_data)
library(ggplot2)
library(nnet)
library(VGAM)
library(data.table)
##Problem 1 - Fit Model for AfterLife
life_data<- read.csv(file.choose(), header=T)
life_data$Afterlife<- factor(life_data$Afterlife, c("Y", "N", "U"))
#life_data$Gender<- factor(life_data$Gender, c("F", "M"))
#life_data$Race<- factor(life_data$Gender, c("W", "B"))
#lifemodel<- multinom(Afterlife ~ Gender+Race, data = life_data)
model<- vglm(Afterlife ~ Gender + Race,
data = life_data,
family = cumulative(parallel = T))
summary(lifemodel)
##Problem 3 - Shower Data
shower_data<- read.csv(file.choose(), header=T)
str(shower_data)
shower_data$Wet <- factor(shower_data$Wet, levels = c("Toward", "Away"))
shower_data$Lather <- factor(shower_data$Lather, levels = c("Toward", "Away"))
shower_data$Rinse <- factor(shower_data$Rinse, levels = c("Toward", "Away"))
# Mutual Independence Model
mutual_indep <- glm(Count ~ Wet + Lather + Rinse, data = shower_data, family = poisson)
# Joint Independence Models
joint_indep_wl <- glm(Count ~ Wet + Lather + Rinse + Wet:Lather, data = shower_data, family = poisson)
joint_indep_wr <- glm(Count ~ Wet + Lather + Rinse + Wet:Rinse, data = shower_data, family = poisson)
joint_indep_lr <- glm(Count ~ Wet + Lather + Rinse + Lather:Rinse, data = shower_data, family = poisson)
# Conditional Independence Models
cond_indep_wl <- glm(Count ~ Wet + Lather + Rinse + Wet:Lather + Wet:Rinse, data = shower_data, family = poisson)
cond_indep_wr <- glm(Count ~ Wet + Lather + Rinse + Wet:Lather + Lather:Rinse, data = shower_data, family = poisson)
cond_indep_lr <- glm(Count ~ Wet + Lather + Rinse + Wet:Rinse + Lather:Rinse, data = shower_data, family = poisson)
# Homogeneous Association Model
h_assoc <- glm(Count ~ Wet + Lather + Rinse + Wet:Lather + Wet:Rinse + Lather:Rinse, data = shower_data, family = poisson)
# Saturation Model
sat_model <- glm(Count ~ Wet + Lather + Rinse + Wet:Lather + Wet:Rinse + Lather:Rinse + Wet:Lather:Rinse, data = shower_data, family = poisson)
# List of models
models <- list(mutual_indep,
joint_indep_wl, joint_indep_wr, joint_indep_lr,
cond_indep_wl, cond_indep_wr, cond_indep_lr,
h_assoc,
sat_model)
# Names of models
model_names <- c("Mutual Independence",
"Joint Independence (Wet:Lather)", "Joint Independence (Wet:Rinse)", "Joint Independence (Lather:Rinse)",
"Conditional Independence (Wet:Lather)", "Conditional Independence (Wet:Rinse)", "Conditional Independence (Lather:Rinse)",
"Homogeneous Association",
"Saturation")
# Function to calculate p-value
calc_p_value <- function(model) {
pchisq(model$deviance, df.residual(model), lower.tail = FALSE)
}
# Extract deviance and p-value for each model
deviances <- sapply(models, function(model) model$deviance)
p_values <- sapply(models, calc_p_value)
# Combine into a data frame
model_comparison <- data.frame(Model = model_names, Deviance = deviances, P_Value = p_values)
# Print the comparison
print(model_comparison)
##Problem 2 - Fit Model for Gun Control-Death Penalty
gun_data<- read.csv(file.choose(), header=T)
str(gun_data)
# Set baseline categories
gun_data$Gun.Register <- factor(gun_data$Gun.Register, levels = c("Oppose", "Favor"))
gun_data$Death.Penalty <- factor(gun_data$Death.Penalty, levels = c("Oppose", "Favor"))
indep_model <- glm(Count ~ Gun.Register + Death.Penalty, data = gun_data, family = poisson)
expected_counts <- fitted(indep_model) * sum(gun_data$Count)
print(expected_counts)
# Test goodness of fit
deviance <- indep_model$deviance
df_residual <- indep_model$df.residual
p_value <- pchisq(deviance, df_residual, lower.tail = FALSE)
print(p_value)
deviance
## Part b
# Fit the saturated log-linear model
saturated_model <- glm(Count ~ Gun.Register + Death.Penalty + Gun.Register:Death.Penalty,
data = gun_data, family = poisson)
print(summary(saturated_model)$coefficients)
# Calculate odds ratio
odds_ratio <- exp(coef(saturated_model)["Gun.RegisterFavor"] +
coef(saturated_model)["Death.PenaltyFavor"] +
coef(saturated_model)["Gun.RegisterFavor:Death.PenaltyFavor"])
# Interpret the odds ratio
interpretation <- paste("The odds of favoring gun registration and the death penalty simultaneously are",
round(odds_ratio, 2), "times higher compared to opposing both policies.")
print(interpretation)
print(round(odds_ratio, 2))
##Problem 1 - Fit Model for AfterLife
life_data<- read.csv(file.choose(), header=T)
str(life_data)
model <- multinom(Afterlife ~ Gender + Race, data = life_data)
library(ggplot2)
library(nnet)
library(VGAM)
library(data.table)
model <- multinom(Afterlife ~ Gender + Race, data = life_data)
summary(model)
# Function to calculate probabilities based on the model coefficients
calculate_probabilities <- function(intercept_yes, intercept_undecided, race_white, gender_male) {
# Log odds for each category
log_odds_yes <- intercept_yes + race_white + gender_male
log_odds_undecided <- intercept_undecided + race_white + gender_male
log_odds_no <- 0  # Baseline category
# Convert log odds to probabilities using logistic function
prob_yes <- exp(log_odds_yes) / (1 + exp(log_odds_yes))
prob_undecided <- exp(log_odds_undecided) / (1 + exp(log_odds_undecided))
prob_no <- exp(log_odds_no) / (1 + exp(log_odds_no))
return(c(prob_yes, prob_undecided, prob_no))
}
# Coefficients from the model
intercept_yes <- 1.301614
intercept_undecided <- -0.652994
race_white <- 0.3417684
gender_male <- -0.4185635
# Calculate probabilities for each combination of sex and race
prob_yes <- calculate_probabilities(intercept_yes, intercept_undecided, race_white, gender_male)
prob_undecided <- calculate_probabilities(intercept_undecided, intercept_undecided, race_white, gender_male)
prob_no <- calculate_probabilities(0, intercept_undecided, race_white, gender_male)
# Print probabilities for each category
cat("Probability of Belief in Afterlife  = Yes\n")
cat("Race = White, Sex = Female: ", prob_yes[1], "\n")
cat("Race = Black, Sex = Female: ", prob_yes[1], "\n")
cat("Race = White, Sex = Male: ", prob_yes[1], "\n")
cat("Race = Black, Sex = Male: ", prob_yes[1], "\n")
cat("Probability of Belief in Afterlife  = Undecided\n")
cat("Race = White, Sex = Female: ", prob_undecided[2], "\n")
cat("Race = Black, Sex = Female: ", prob_undecided[2], "\n")
cat("Race = White, Sex = Male: ", prob_undecided[2], "\n")
cat("Race = Black, Sex = Male: ", prob_undecided[2], "\n")
cat("Probability of Belief in Afterlife  = No\n")
cat("Race = White, Sex = Female: ", prob_no[3], "\n")
cat("Race = Black, Sex = Female: ", prob_no[3], "\n")
cat("Race = White, Sex = Male: ", prob_no[3], "\n")
cat("Race = Black, Sex = Male: ", prob_no[3], "\n")
# Print probabilities for each category
cat("Probability of Belief in Afterlife  = Yes\n")
cat("Race = White, Sex = Female: ", prob_yes[1], "\n")
cat("Race = Black, Sex = Female: ", prob_yes[2], "\n")
cat("Race = White, Sex = Male: ", prob_yes[3], "\n")
cat("Race = Black, Sex = Male: ", prob_yes[4], "\n")
cat("Probability of Belief in Afterlife  = Undecided\n")
cat("Race = White, Sex = Female: ", prob_undecided[1], "\n")
cat("Race = Black, Sex = Female: ", prob_undecided[2], "\n")
cat("Race = White, Sex = Male: ", prob_undecided[3], "\n")
cat("Race = Black, Sex = Male: ", prob_undecided[4], "\n")
cat("Probability of Belief in Afterlife  = No\n")
cat("Race = White, Sex = Female: ", prob_no[1], "\n")
cat("Race = Black, Sex = Female: ", prob_no[2], "\n")
cat("Race = White, Sex = Male: ", prob_no[3], "\n")
cat("Race = Black, Sex = Male: ", prob_no[4], "\n")
# Fit the null model without the 'Gender' variable
null_model <- multinom(Afterlife ~ Race, data = life_data)
# Fit the full model with the 'Gender' variable
full_model <- multinom(Afterlife ~ Gender + Race, data = life_data)
# Perform likelihood ratio test
lr_test <- lrtest(null_model, full_model)
print(lr_test)
# Fit the null model without the 'Gender' variable
null_model <- multinom(Afterlife ~ Race, data = life_data)
# Fit the full model with the 'Gender' variable
full_model <- multinom(Afterlife ~ Gender + Race, data = life_data)
# Perform likelihood ratio test using anova
lr_test <- anova(null_model, full_model, test = "Chisq")
# Print the test result
print(lr_test)
# Fit the null model without the 'Race' variable
null_model <- multinom(Afterlife ~ Gender, data = life_data)
# Fit the full model with the 'Race' variable
full_model <- multinom(Afterlife ~ Gender + Race, data = life_data)
# Perform likelihood ratio test using anova
lr_test <- anova(null_model, full_model, test = "Chisq")
print(lr_test)
