##Problem 1
spiderdata<- read.csv(file.choose(), header=T)
str(spiderdata)
cannibalism_count <- sum(spiderdata$Cannibalism == "Yes")
# Calculate the proportion of matings where cannibalism occurred
proportion_cannibalism <- cannibalism_count / nrow(spiderdata)
proportion_cannibalism
# Fit logistic regression model
logit_model <- glm(Cannibalism ~ Size.Difference..Female...Male., data = spiderdata, family = binomial)
##Fit the logistic regression model
# Convert "Cannibalism" variable to 0 and 1
spiderdata$Cannibalism <- as.factor(ifelse(spiderdata$Cannibalism == "Yes", 1, 0))
logit_model <- glm(Cannibalism ~ Size.Difference..Female...Male., data = spiderdata, family = binomial)
summary(logit_model)
# Define the logistic regression equation
logistic_eq <- function(size_difference) {
probability <- 1 / (1 + exp(-( -3.0890 + 3.0693 * size_difference)))
return(probability)
}
##Calculate predicted probability for difference = -0.2mm
prob_minus_0_2mm <- logistic_eq(-0.2)
cat("Predicted probability of cannibalism for a size difference of -0.2mm:", prob_minus_0_2mm, "\n")
# Calculate predicted probability for difference = 0.4mm
prob_0_4mm <- logistic_eq(0.4)
cat("Predicted probability of cannibalism for a size difference of 0.4mm:", prob_0_4mm, "\n")
##Calculate exp(slope)
##Calculate exp(intercept)
logit_model$coefficients
##Calculate confidence interval for probability for difference = 0mm
newdiff = data.frame(Size.Difference..Female...Male. = 0)
glm.prob.ci(logit_model, newdata = newdiff, conf.level = 0.95)
##Required Libraries
library(ggplot2)
library(pROC)
library(ResourceSelection)
##Required Functions
glm.prob.ci<- function(model, newdata = NULL, conf.level = 0.95){
alpha2.level<- conf.level + (1 - conf.level)/2
z_alpha2<- qnorm(alpha2.level, 0, 1)
if (is.null(newdata)=="TRUE") {
model.logodds<- predict.glm(model, se.fit = T)
model.logodds.lci<- model.logodds$fit - z_alpha2*model.logodds$se.fit
model.logodds.uci<- model.logodds$fit + z_alpha2*model.logodds$se.fit
model.probs.lci<- exp(model.logodds.lci)/(1 + exp(model.logodds.lci))
model.probs.uci<- exp(model.logodds.uci)/(1 + exp(model.logodds.uci))
model$data<- cbind(model$data, model.probs.lci, model.probs.uci)
model$data
} else {
model.logodds<- predict.glm(model, newdata = newdata, se.fit = T)
model.logodds.lci<- model.logodds$fit - z_alpha2*model.logodds$se.fit
model.logodds.uci<- model.logodds$fit + z_alpha2*model.logodds$se.fit
model.probs.lci<- exp(model.logodds.lci)/(1 + exp(model.logodds.lci))
model.probs.uci<- exp(model.logodds.uci)/(1 + exp(model.logodds.uci))
probs.ci<- cbind(model.probs.lci, model.probs.uci)
colnames(probs.ci)<- c(as.character(100*(1-alpha2.level)),
as.character(100*alpha2.level))
list(probs.ci)
}
}
confusion.glm <- function(model, cutoff = 0.5) {
predicted <- ifelse(predict(model, type='response') > cutoff,
1, 0)
observed<- model$y
confusion  <- table(observed, predicted)
agreement<- (confusion[1,1]+confusion[2,2])/sum(confusion)
specificity<- confusion[1,1]/rowSums(confusion)[1]
sensitivity<- confusion[2,2]/rowSums(confusion)[2]
list("Confusion Table" = confusion,
"Agreement" = agreement,
"Sensitivity" = sensitivity,
"Specificity" = specificity)
}
McFR2<- function(model) {
G2<- model$deviance
G2null<- model$null.deviance
McFR2<- 1 - G2/G2null
McFR2
}
##Calculate confidence interval for probability for difference = 0mm
newdiff = data.frame(Size.Difference..Female...Male. = 0)
glm.prob.ci(logit_model, newdata = newdiff, conf.level = 0.95)
##Calculate confidence interval for probability for difference = 0.8mm
newdiff = data.frame(Size.Difference..Female...Male. = 0.8)
glm.prob.ci(logit_model, newdata = newdiff, conf.level = 0.95)
##Wald test information is in summary(model)
coefficients <- coef(logit_model)
standard_errors <- summary(logit_model)$coefficients[, "Std. Error"]
wald_test_statistic <- coefficients["Size.Difference..Female...Male."] / standard_errors["Size.Difference..Female...Male."]
cat("Wald test statistic for the size difference coefficient:", wald_test_statistic, "\n")
summary(logit_model)
spiderdata$Cannibalism <- as.factor(ifelse(spiderdata$Cannibalism == "Yes", 1, 0))
logit_model <- glm(Cannibalism ~ Size.Difference..Female...Male., data = spiderdata, family = binomial)
summary(logit_model)
##Problem 1
spiderdata<- read.csv(file.choose(), header=T)
spiderdata$Cannibalism <- as.factor(ifelse(spiderdata$Cannibalism == "Yes", 1, 0))
logit_model <- glm(Cannibalism ~ Size.Difference..Female...Male., data = spiderdata, family = binomial)
summary(logit_model)
##Wald test information is in summary(model)
coefficients <- coef(logit_model)
standard_errors <- summary(logit_model)$coefficients[, "Std. Error"]
wald_test_statistic <- coefficients["Size.Difference..Female...Male."] / standard_errors["Size.Difference..Female...Male."]
cat("Wald test statistic for the size difference coefficient:", wald_test_statistic, "\n")
##Calculate Likelihood Ratio Test statistic and p-value
anova(logit_model, test = "Chisq")
##Use function McFR2 to calculate McFadden's R^2
McFR2(logit_model)
##Use function hoslem.test to calculate test statistic
##and p-value for Hosmer-Lemeshow test
hoslem_result <- hoslem.test(spiderdata$Cannibalism, fitted(logit_model), g = 5)
##Use function hoslem.test to calculate test statistic
##and p-value for Hosmer-Lemeshow test
hoslem_result <- hoslem.test(spiderdata$Cannibalism, logit_model$fitted.values, g = 5)
hoslem_result
##Use function confusion.glm to obtain confusion table
##and associated statistics
confusion.glm(logit_model)
##Run the functions to calculate and graph the ROC Curve
##Run the function aoc() to find the area under ROC Curve
spiderroc<- roc(spiderdata$Cannibalism ~ logit_model$fitted.values)
ggroc(spiderroc)+
theme_bw()+
theme(axis.title.y = element_text(size = rel(1.4)))+
theme(axis.title.x = element_text(size = rel(1.4)))+
theme(axis.text.x = element_text(size = rel(1.6)))+
theme(axis.text.y = element_text(size = rel(1.6)))+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1),
linetype="dashed")+
labs(x = "Sensitivity",
y = "Specificity",
title = "ROC Curve for Spider Model")
auc(spiderroc)
