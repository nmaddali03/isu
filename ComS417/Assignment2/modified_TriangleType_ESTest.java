/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 17 03:24:12 GMT 2024
 */

package triangle;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import triangle.Triangle;
import triangle.TriangleType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TriangleType_ESTest extends TriangleType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(3525, 3525, 3961);
      assertEquals(Triangle.SCALENE, triangle0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(2, 3, 3);
      assertEquals(Triangle.SCALENE, triangle0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(6, 2938, 6);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(3, 1, 2);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(1, 1, 1253);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(544, 1, 0);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(3087, 0, (-2597));
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(0, (-808), 4);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(544, 544, 12);
      assertEquals(Triangle.SCALENE, triangle0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(241, 1, 241);
      assertEquals(Triangle.ISOSCELES, triangle0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(1, 2, 1);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(3487, 4, 212);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(4, 1, 5);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(241, 241, (-620));
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(1, (-2790), (-1373));
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(1, 1, 1);
      assertEquals(Triangle.EQUILATERAL, triangle0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle((-2134), (-620), (-2134));
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TriangleType triangleType0 = new TriangleType();
  }
}
