/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 17 03:18:05 GMT 2024
 */

package triangle;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import triangle.Triangle;
import triangle.TriangleType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TriangleType_ESTest extends TriangleType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(1233, 2835, 3518);
      assertEquals(Triangle.SCALENE, triangle0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(1043, 1043, 191);
      assertEquals(Triangle.ISOSCELES, triangle0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(1, 2, 1);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(3201, 1043, 195);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(2, 1, 3);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(148, 2, 0);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(314, 0, 3040);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(0, 0, 0);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(2076, 1182, 1182);
      assertEquals(Triangle.ISOSCELES, triangle0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(2326, 4244, 2326);
      assertEquals(Triangle.ISOSCELES, triangle0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(1224, 1224, 1763);
      assertEquals(Triangle.ISOSCELES, triangle0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(2439, 3201, 2245);
      assertEquals(Triangle.SCALENE, triangle0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(1, 1908, 1);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(2, 1, 1);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(2, 2, 148);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(1, 1908, (-183));
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(409, (-86), 409);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(1, 1, 1);
      assertEquals(Triangle.EQUILATERAL, triangle0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle((-882), (-3633), 1);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TriangleType triangleType0 = new TriangleType();
  }
}
