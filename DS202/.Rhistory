group_by(Name=`Category.Name`, month=floor_date(new_data$Date, "month")) %>%
summarize(totalVolumes = sum(`Volume.Sold..Gallons.`))
monthlySummary <- monthly %>%
group_by(Name) %>%
summarize(month=max(month), totalVolumes = max(totalVolumes))
monthlySummary <- monthlySummary %>%
arrange(desc(totalVolumes))
ggplot(monthly, aes(x=month, y=totalVolumes, color=Name))+geom_line() +
labs(y="Total Volume Sold", title="Total Volume Sold vs. Months of Liquor") +
geom_text(aes(x=month, y=totalVolumes, label=Name),data=monthly %>% filter(totalVolumes > 1210))
monthly <- new_data %>%
group_by(Name=`Category.Name`, month=floor_date(new_data$Date, "month")) %>%
summarize(totalVolumes = sum(`Volume.Sold..Gallons.`))
monthlySummary <- monthly %>%
group_by(Name) %>%
summarize(month=max(month), totalVolumes = max(totalVolumes))
monthlySummary <- monthlySummary %>%
arrange(desc(totalVolumes))
ggplot(monthly, aes(x=month, y=totalVolumes, color=Name))+geom_line() +
labs(y="Total Volume Sold", title="Total Volume Sold vs. Months of Liquor") +
geom_text(aes(x=month, y=totalVolumes, label=Name),data=monthly %>% filter(totalVolumes > 1210))
monthly <- new_data %>%
group_by(Name=`Category.Name`, month=floor_date(new_data$Date, "month")) %>%
summarize(totalVolumes = sum(`Volume.Sold..Gallons.`))
monthlySummary <- monthly %>%
group_by(Name) %>%
summarize(month=max(month), totalVolumes = max(totalVolumes))
monthlySummary <- monthlySummary %>%
arrange(desc(totalVolumes))
ggplot(monthly, aes(x=month, y=totalVolumes, color=Name))+geom_line() +
labs(y="Total Volume Sold", title="Total Volume Sold vs. Months of Liquor") +
geom_text(aes(x=month, y=totalVolumes, label=Name),data=monthly %>% filter(totalVolumes > 1210))
#Create a single plot for the monthly volumes sold. Each liquor category should be shown
#using a separate time series. Label the top 5 categories using text labels.
monthly <- new_data %>%
group_by(Name=`Category.Name`, month=floor_date(new_data$Date, "month")) %>%
summarize(totalVolumes = sum(`Volume.Sold..Gallons.`), Name, month)
#Create a single plot for the monthly volumes sold. Each liquor category should be shown
#using a separate time series. Label the top 5 categories using text labels.
monthly <- new_data %>%
group_by(Name=`Category.Name`, month=floor_date(new_data$Date, "month")) %>%
summarize(totalVolumes = sum(`Volume.Sold..Gallons.`), Name, month)
monthly <- new_data %>%
group_by(Name=`Category.Name`, month=floor_date(new_data$Date, "month")) %>%
summarize(totalVolumes = sum(`Volume.Sold..Gallons.`), Name, month)
monthlySummary <- monthly %>%
group_by(Name) %>%
summarize(month=max(month), totalVolumes = max(totalVolumes))
monthlySummary <- monthlySummary %>%
arrange(desc(totalVolumes))
ggplot(monthly, aes(x=month, y=totalVolumes, color=Name))+geom_line() +
labs(y="Total Volume Sold", title="Total Volume Sold vs. Months of Liquor") +
geom_text(aes(x=month, y=totalVolumes, label=Name),data=monthly %>% filter(totalVolumes > 1210))
ggplot(monthly, aes(x=month, y=totalVolumes))+geom_line() +
labs(y="Total Volume Sold", title="Total Volume Sold vs. Months of Liquor") +
geom_text(aes(x=month, y=totalVolumes, label=Name),data=monthly %>% filter(totalVolumes > 1210))
ggplot(monthly, aes(x=month, y=totalVolumes, by=Name))+geom_line() +
labs(y="Total Volume Sold", title="Total Volume Sold vs. Months of Liquor") +
geom_text(aes(x=month, y=totalVolumes, label=Name),data=monthly %>% filter(totalVolumes > 1210))
getwd()
library(readxl)
library(ggplot2)
library(dplyr)
library(tidyverse)
bestInShow <- read_excel('./KIB - Best in Show (public).xlsx', sheet='Best in show')
View(bestInShow)
bis.full <- readxl::read_xlsx('KIB - Best in Show (public).xlsx', sheet='Best in show full sheet', skip=2)
View(bis.full)
bis.full <- bis.full[-1,]
View(bis.full)
bis.full <- readxl::read_xlsx('KIB - Best in Show (public).xlsx', sheet='Best in show full sheet', skip=2)
bis.full <- bis.full[-1,]
bis.full <- bis.full %>% select(1, "category", "datadog score", 6, "size category", "intelligence category")
colnames(bis.full) <- c("Breed", "Category", "Score", "Popularity", "Size", "Intelligence")
View(bis.full)
plt <- bis.full %>% ggplot(aes(x = Score, y = Popularity, shape=Intelligence, label=Breed, color=Category)) + geom_point(aes(size=Size))
cols <- c('Herding' = '#CB7057', 'Hound' = '#3E3267', 'Non-sporting' = '#618446', 'Sporting' = '#A22729', 'Terrier' = '#A77619', 'Toy' = '#5A1429', 'Working' = '#293E3C')
plt <- plt + scale_color_manual(values = cols)
plt <- plt + scale_shape_manual(values=c(15,16))
plt <- plt + theme_void()
plt <- plt + scale_y_reverse()
plt <- plt + geom_hline(yintercept=75) + geom_vline(xintercept=2.3)
plt <- plt + geom_label_repel()
library(ggrepel)
plt <- plt + geom_label_repel()
plt <- plt + annotate(geom="text", x = 1, y = 80, label="Score", size = 4)
plt <- plt + annotate(geom="text", x = 2.45, y = 0.25, label="Popularity", size=4)
plt <- plt + annotate(geom="text", x = 1.2, y = 1, label="Inexplicably Overrated", size=6)
plt <- plt + annotate(geom="text", x = 3.5, y = 1, label="Hot Dogs!", size=6)
plt <- plt + annotate(geom="text", x = 1, y = 170, label="The Rightly Ignored", size=6)
plt <- plt + annotate(geom="text", x = 3.5, y = 170, label="Overlooked Treasures", size=6)
plt
plt <- plt + annotate(geom="text", x = 1.2, y = 1, label="Inexplicably Overrated", size=6)
plt <- plt + annotate(geom="text", x = 3.5, y = 1, label="Hot Dogs!", size=6)
plt <- plt + annotate(geom="text", x = 1, y = 170, label="The Rightly Ignored", size=6)
plt <- plt + annotate(geom="text", x = 3.5, y = 170, label="Overlooked Treasures", size=6)
plt
plt <- bis.full %>% ggplot(aes(x = Score, y = Popularity, shape=Intelligence, label=Breed, color=Category)) + geom_point(aes(size=Size))
cols <- c('Herding' = '#CB7057', 'Hound' = '#3E3267', 'Non-sporting' = '#618446', 'Sporting' = '#A22729', 'Terrier' = '#A77619', 'Toy' = '#5A1429', 'Working' = '#293E3C')
plt <- plt + scale_color_manual(values = cols)
plt <- plt + scale_shape_manual(values=c(15,16))
plt <- plt + theme_void()
plt <- plt + scale_y_reverse()
plt <- plt + geom_hline(yintercept=75) + geom_vline(xintercept=2.3)
plt <- plt + geom_label_repel()
plt
bis.full <- readxl::read_xlsx('KIB - Best in Show (public).xlsx', sheet='Best in show full sheet', skip=2)
bis.full <- bis.full[-1,]
bis.full <- bis.full %>% select(1, "category", "datadog score", 6, "size category", "intelligence category")
colnames(bis.full) <- c("Breed", "Category", "Score", "Popularity", "Size", "Intelligence")
plt <- bis.full %>% ggplot(aes(x = Score, y = Popularity, shape=Intelligence, label=Breed, color=Category)) + geom_point(aes(size=Size))
plt
cols <- c('Herding' = '#CB7057', 'Hound' = '#3E3267', 'Non-sporting' = '#618446', 'Sporting' = '#A22729', 'Terrier' = '#A77619', 'Toy' = '#5A1429', 'Working' = '#293E3C')
cols
plt <- plt + scale_color_manual(values = cols)
plt
library(lubridate)
bis.full <- readxl::read_xlsx('KIB - Best in Show (public).xlsx', sheet='Best in show full sheet', skip=2)
bis.full <- bis.full[-1,]
bis.full <- bis.full %>% select(1, "category", "datadog score", 6, "size category", "intelligence category")
colnames(bis.full) <- c("Breed", "Category", "Score", "Popularity", "Size", "Intelligence")
plt <- bis.full %>% ggplot(aes(x = Score, y = Popularity, shape=Intelligence, label=Breed, color=Category)) + geom_point(aes(size=Size))
cols <- c('Herding' = '#CB7057', 'Hound' = '#3E3267', 'Non-sporting' = '#618446', 'Sporting' = '#A22729', 'Terrier' = '#A77619', 'Toy' = '#5A1429', 'Working' = '#293E3C')
plt <- plt + scale_color_manual(values = cols)
plt <- plt + scale_shape_manual(values=c(15,16))
plt <- plt + theme_void()
plt <- plt + scale_y_reverse()
plt <- plt + geom_hline(yintercept=75) + geom_vline(xintercept=2.3)
plt <- plt + geom_label_repel()
plt <- plt + annotate(geom="text", x = 1, y = 80, label="Score", size = 4)
plt <- plt + annotate(geom="text", x = 2.45, y = 0.25, label="Popularity", size=4)
plt <- plt + annotate(geom="text", x = 1.2, y = 1, label="Inexplicably Overrated", size=6)
plt <- plt + annotate(geom="text", x = 3.5, y = 1, label="Hot Dogs!", size=6)
plt <- plt + annotate(geom="text", x = 1, y = 170, label="The Rightly Ignored", size=6)
plt <- plt + annotate(geom="text", x = 3.5, y = 170, label="Overlooked Treasures", size=6)
plt
plt <- bis.full %>% ggplot(aes(x = Score, y = Popularity, shape=Intelligence, label=Breed, color=Category)) + geom_point(aes(size=Size))
plt
plt + scale_color_manual(values = cols)
plt + scale_shape_manual(values=c(15,16))
#plt + scale_shape_manual(values=c(15,16))
plt + theme_void()
plt + scale_y_reverse()
plt <- bis.full %>% ggplot(aes(x = Score, y = Popularity, shape=Intelligence, label=Breed, color=Category)) + geom_point(aes(size=Size))
cols <- c('Herding' = '#CB7057', 'Hound' = '#3E3267', 'Non-sporting' = '#618446', 'Sporting' = '#A22729', 'Terrier' = '#A77619', 'Toy' = '#5A1429', 'Working' = '#293E3C')
plt + scale_color_manual(values = cols)
#plt + scale_shape_manual(values=c(15,16))
plt + theme_void()
#plt + scale_y_reverse()
plt + geom_hline(yintercept=75) + geom_vline(xintercept=2.3)
plt + geom_label_repel()
plt + annotate(geom="text", x = 1, y = 80, label="Score", size = 4)
plt + annotate(geom="text", x = 2.45, y = 0.25, label="Popularity", size=4)
plt + annotate(geom="text", x = 1.2, y = 1, label="Inexplicably Overrated", size=6)
plt + annotate(geom="text", x = 3.5, y = 1, label="Hot Dogs!", size=6)
plt + annotate(geom="text", x = 1, y = 170, label="The Rightly Ignored", size=6)
plt + annotate(geom="text", x = 3.5, y = 170, label="Overlooked Treasures", size=6)
plt
getwd()
ggplot(person[person$INJ_SEV==4,])#Question 2. Create a data frame containing the most dangerous vehicle make in each state.
library(ggplot2)
library(dplyr)
library(tidyverse)
library(stringr)
library(lubridate) # Time
library(scales)
acc <- read.csv("https://raw.githubusercontent.com/xdaiISU/ds202materials/master/hwlabs/fars2017/accident.csv", stringsAsFactors = FALSE)
person <- read.csv("https://raw.githubusercontent.com/xdaiISU/ds202materials/master/hwlabs/fars2017/person.csv", stringsAsFactors = FALSE)
ggplot(person[person$INJ_SEV==4,])
fatal <- person %>% filter(INJ_SEV == 4)
View(fatal)
#Question 1. Create a data frame containing the persons who are fatally hurt in the accidents
#(see FARS manual and look up variable INJ_SEV
fatal <- person %>% filter(INJ_SEV == 4)
View(fatal)
knitr::opts_chunk$set(echo = TRUE)
temp_data <- new_data %>% arrange(desc(`Volume.Sold..Gallons.`))
library(ggplot2)
library(dplyr)
library(tidyverse)
library(stringr)
library(lubridate) # Time
library(scales)
data <- read.csv('./2021_Iowa_Liquor_Sales.csv')
str(data)
new_data <- data
new_data <- new_data %>% mutate(Date = mdy(Date))
str(new_data)
new_data <- separate(new_data, col = "Store.Location",
into=c("Point","Latitude","Longitude"),sep="\\(")
new_data$Point <- NULL
new_data <- separate(new_data, col="Latitude", into=c("Latitude","Longitude"),sep="\\)")
new_data <- separate(new_data, col="Latitude", into=c("Latitude","Longitude"),sep=" ")
new_data$`Category.Name` = factor(new_data$`Category.Name`)
temp_data <- new_data %>% arrange(desc(`Volume.Sold..Gallons.`))
View(temp_data)
monthly <- new_data %>%
group_by(Name=`Category.Name`, month=floor_date(new_data$Date, "month")) %>%
summarize(totalVolumes = sum(`Volume.Sold..Gallons.`), Name, month)
View(monthly)
#Question 2. Create a data frame containing the most dangerous vehicle make in each state.
#The number of persons fatally hit in the vehicle make is used to assess the (non-)safety of a
#make. Make sure to handle the missing values appropriately. (look up variable MAKE)
dangerVehicle <- fatal %>% group_by(State) %>%
summarize(Make = max(Make))
#Question 2. Create a data frame containing the most dangerous vehicle make in each state.
#The number of persons fatally hit in the vehicle make is used to assess the (non-)safety of a
#make. Make sure to handle the missing values appropriately. (look up variable MAKE)
dangerVehicle <- fatal %>% group_by(State) %>%
summarize(Make = max(Make))
#Question 2. Create a data frame containing the most dangerous vehicle make in each state.
#The number of persons fatally hit in the vehicle make is used to assess the (non-)safety of a
#make. Make sure to handle the missing values appropriately. (look up variable MAKE)
dangerVehicle <- fatal %>% group_by(STATE) %>%
summarize(MAKE = max(MAKE))
view(dangerVehicle)
#Question 2. Create a data frame containing the most dangerous vehicle make in each state.
#The number of persons fatally hit in the vehicle make is used to assess the (non-)safety of a
#make. Make sure to handle the missing values appropriately. (look up variable MAKE)
dangerVehicle <- fatal %>% group_by(STATE) %>%
summarize(highestMake = max(MAKE))
View(dangerVehicle)
#Question 2. Create a data frame containing the most dangerous vehicle make in each state.
#The number of persons fatally hit in the vehicle make is used to assess the (non-)safety of a
#make. Make sure to handle the missing values appropriately. (look up variable MAKE)
dangerVehicle <- na.omit(fatal)
dangerVehicle <- fatal %>% group_by(STATE) %>% pmax(MAKE)
dangerVehicle <- fatal %>% group_by(STATE) %>% summarize(STATE = max(STATE), MAKE=max(MAKE))
View(dangerVehicle)
dangerVehicle <- fatal %>% group_by(STATE) %>%
summarize(totalMake = sum(MAKE))
View(dangerVehicle)
dangerVehicle <- fatal %>% group_by(STATE) %>%
summarize(totalMake = sum(fatal$`MAKE`))
View(dangerVehicle)
question3 <- fatal %>% group_by(STATE, MAKE) %>%
summarise(nf = n())
danger <- question3 %>% na.omit() %>%
group_by(STATE) %>%
filter(nf == max(nf))
View(danger)
question3 <- fatal %>% group_by(STATE, MAKE) %>%
summarise(numfatal = n())
danger <- question3 %>% na.omit() %>%
group_by(STATE) %>%
filter(numfatal == max(numfatal))
#Question 2. Create a data frame containing the most dangerous vehicle make in each state.
#The number of persons fatally hit in the vehicle make is used to assess the (non-)safety of a
#make. Make sure to handle the missing values appropriately. (look up variable MAKE)
danger <- fatal %>% group_by(STATE, MAKE) %>%
summarise(numfatal = n())
danger <- question3 %>% na.omit() %>%
group_by(STATE) %>%
filter(numfatal == max(numfatal))
View(danger)
#Question 4. Join the accident and person table (work out which variable(s) to use)
joinedTables <- inner_join(person, acc, by="ST_CASE")
View(joinedTables)
#Question 5. Tally the number of accidents by day of the week (DAY_WEEK), hour of the day
#(HOUR) and gender (SEX). Visualize the results and explain what you find.
tallied <- joinedTables %>%
filter(SEX == 1 || SEX == 2) %>%
group_by(ST_CASE) %>%
summarise(avgSex = mean(SEX))
tallied$sexStr <- ifelse(tallied$avgSex == 1, 'Men', ifelse(tallied$avgSex == 2, 'Women', 'Both'))
accident <- tallied %>%
select(ST_CASE, sexStr) %>%
inner_join(acc, by='ST_CASE')
grouped <- accident %>%
filter(HOUR <= 24) %>%
filter(DAY_WEEK != 9) %>%
group_by(sexStr, HOUR, DAY_WEEK) %>%
summarise(numAccidents = n()) %>%
arrange(desc(numAccidents))
ggplot(grouped,aes(x=HOUR, y=numAccidents)) +
geom_bar(stat='identity') +
facet_grid(sexStr~DAY_WEEK) +
xlab("Hours of the day") +
ylab("Total number of accidents")
library(readxl)
#Question 3. Create a map, and label each state with the most dangerous vehicle. Discuss the
#definition of the most dangerous vehicle, and what you find from the map. (Hint: Read the
#description for the STATE and COUNTY columns in the FARS manual. The state & county codes are
#Geographic Locator Codes (GLCs) from the General Services Administration’s (GSA) publication.
#Use readxl::read_xlsx to read in the GLCs.)
GLCs <- readxl::read_xlsx("FRPP_GLC_-_United_StatesNov42021.xlsx")
View(GLCs)
#Question 3. Create a map, and label each state with the most dangerous vehicle. Discuss the
#definition of the most dangerous vehicle, and what you find from the map. (Hint: Read the
#description for the STATE and COUNTY columns in the FARS manual. The state & county codes are
#Geographic Locator Codes (GLCs) from the General Services Administration’s (GSA) publication.
#Use readxl::read_xlsx to read in the GLCs.)
GLCs <- readxl::read_xlsx("FRPP_GLC_-_United_StatesNov42021.xlsx")
states <- map_data('state')
GLCs$'State Name' <- tolower(GLCs$'State Name')
GLCs$'State Code' <- as.numeric(GLCs$'State Code')
labels <- states %>%
group_by(region) %>%
summarise(long= mean(long, na.rm = TRUE), lat= mean(lat, na.rm = TRUE))
labels <- left_join(labels, code, by = c("region" = "State Name"))
labels <- states %>%
group_by(region) %>%
summarise(long= mean(long, na.rm = TRUE), lat= mean(lat, na.rm = TRUE))
labels <- left_join(labels, GLCs, by = c("region" = "State Name"))
labels <- left_join(labels, danger, by = c("State Code" = "STATE"))
labels$MAKE <- factor(labels$MAKE, levels = c(12, 20, 49, 37),
labels = c("Ford", "Chevrolet", "Toyota", "Honda"))
states %>% ggplot() +
geom_polygon( aes(x=long, y=lat, group=group),
color="grey", fill="black" ) + geom_text(data=labels, aes(label =
MAKE, x=long, y=lat), color="blue", size=3)
states %>% ggplot() +
geom_polygon( aes(x=long, y=lat, group=group),
color="grey", fill="blue" ) + geom_text(data=labels, aes(label =
MAKE, x=long, y=lat), color="black", size=3)
#Question 5. Tally the number of accidents by day of the week (DAY_WEEK), hour of the day
#(HOUR) and gender (SEX). Visualize the results and explain what you find.
tallied <- joinedTables %>%
filter(SEX == 1 || SEX == 2) %>%
group_by(ST_CASE) %>%
summarise(avgSex = mean(SEX))
tallied$sexStr <- ifelse(tallied$avgSex == 1, 'Men', ifelse(tallied$avgSex == 2, 'Women', 'Both'))
accident <- tallied %>%
select(ST_CASE, sexStr) %>%
inner_join(acc, by='ST_CASE')
grouped <- accident %>%
filter(HOUR <= 24) %>%
filter(DAY_WEEK != 9) %>%
group_by(sexStr, HOUR, DAY_WEEK) %>%
summarise(numAccidents = n()) %>%
arrange(desc(numAccidents))
ggplot(grouped,aes(x=HOUR, y=numAccidents)) +
geom_bar(stat='identity') +
facet_grid(sexStr~DAY_WEEK) +
xlab("Hours of the day") +
ylab("Total number of accidents")
#Question 6. Now plot a choropleth map of the number of deaths on a county level. Also explain
#what you find.
df <- readxl::read_xlsx("FRPP_GLC_-_United_StatesNov42021.xlsx")
states <- map_data('state')
counties <- map_data('county')
var <- c("STATE", "COUNTY", "FATALS")
fatals <- acc[var]
df$'State Code' <- as.numeric(df$`State Code`)
df$'City Code' <- as.numeric(df$`City Code`)
df$'County Code' <- as.numeric(df$`County Code`)
fatals <- fatals %>% group_by(STATE, COUNTY) %>%
summarize(FATALS = sum(FATALS))
fatals <- fatals %>% left_join(df, by=c('COUNTY' = 'County Code', 'STATE' =
'State Code'))
var2 <- c("State Name", "County Name", "FATALS")
fatals <- fatals[var2]
fatals <- unique(fatals)
fatals$`State Name` <- tolower(fatals$`State Name`)
fatals$`County Name` <- tolower(fatals$`County Name`)
fatals <- fatals %>% right_join(counties, by=c('County Name' = 'subregion',
'State Name' = 'region'))
ggplot(fatals, aes(x=long, y=lat)) +
geom_polygon(aes(group=group)) +
geom_polygon(aes(group=group, fill=FATALS))
#Question 7. (Optional) Is summer or winter more dangerous? Does this depend on states? Explore
#and explain.
Winter <- acc %>%
filter(MONTH < 5 | MONTH > 10)
Summer <- acc %>%
filter(MONTH > 5 & MONTH < 10)
var3 <- c("State Name", "State Code")
df2 <- df[var3]
df2 <- unique(df2)
winterFatal <- Winter %>%
group_by(STATE) %>%
summarize(FATALS = sum(FATALS))
summerFatal <- Summer %>%
group_by(STATE) %>%
summarize(FATALS = sum(FATALS))
summerFatal <- summerFatal %>% left_join(df2, by=c('STATE' = 'State Code'))
summerFatal$`State Name` <- tolower(summerFatal$`State Name`)
summerFatal <- summerFatal %>% right_join(states, by=c('State Name' = 'region'))
var2 <- c("STATE", "FATALS", "long", "lat", "group")
summerFatal <- summerFatal[var2]
ggplot(summerFatal, aes(x=long, y=lat, fill = FATALS)) +
geom_polygon(aes(group = group)) +
labs(title = "Car Accidents in the Summer by State")
winterFatal <- winterFatal %>% left_join(df2, by=c('STATE' = 'State Code'))
winterFatal$`State Name` <- tolower(winterFatal$`State Name`)
winterFatal <- winterFatal %>% right_join(states, by=c('State Name' = 'region'))
winterFatal <- winterFatal[var2]
ggplot(winterFatal, aes(x=long, y=lat, fill = FATALS)) +
geom_polygon(aes(group = group)) +
labs(title = "Car Accidents in the Winter by State")
df <- readxl::read_xlsx("FRPP_GLC_-_United_StatesNov42021.xlsx")
states <- map_data('state')
counties <- map_data('county')
var <- c("STATE", "COUNTY", "FATALS")
fatals <- acc[var]
df$'State Code' <- as.numeric(df$`State Code`)
df$'City Code' <- as.numeric(df$`City Code`)
df$'County Code' <- as.numeric(df$`County Code`)
fatals <- fatals %>% group_by(STATE, COUNTY) %>%
summarize(FATALS = sum(FATALS))
fatals <- fatals %>% left_join(df, by=c('COUNTY' = 'County Code', 'STATE' =
'State Code'))
var2 <- c("State Name", "County Name", "FATALS")
fatals <- fatals[var2]
fatals <- unique(fatals)
fatals$`State Name` <- tolower(fatals$`State Name`)
fatals$`County Name` <- tolower(fatals$`County Name`)
fatals <- fatals %>% right_join(counties, by=c('County Name' = 'subregion',
'State Name' = 'region'))
ggplot(fatals, aes(x=long, y=lat)) +
geom_polygon(aes(group=group)) +
geom_polygon(aes(group=group, fill=FATALS))
library(tidyverse)
library(lubridate)
covid <- read_csv('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv')
str(covid)
summary(covid)
story <- covid %>%
filter(state == 'Iowa' & county == 'Story' &
date >= mdy('08/01/21'))
ggplot(story, aes(x=date, y=cases)) + geom_point() + geom_smooth()
ggplot(story, aes(x=date, y=cases)) + geom_point() + geom_smooth(method='lm')
ggplot(story, aes(x=date, y=cases)) + geom_point() + geom_smooth(method='loess')
ggplot(story, aes(x=date, y=cases)) + geom_point() + geom_smooth(method='loess', span=1/10) # Not smooth enough with a small span
ggplot(story, aes(x=date, y=cases)) + geom_point() + geom_smooth(method='loess', span=2) # Too smooth, so the fit to data is not good
ggplot(story, aes(x=date, y=cases)) + geom_point() + geom_smooth(method='loess', span=1/3)
johnson <- covid %>%
filter(state == 'Iowa' & county == 'Johnson' &
date >= mdy('08/01/21'))
ggplot(story, aes(x=date, y=cases)) + geom_line(color='red') + geom_line(data=johnson, color='yellow')
ggplot(story, aes(x=date, y=cases)) + geom_line() + geom_line(mapping=aes(y=deaths))
ggplot(story, aes(x=date, y=cases)) + geom_line(color='blue')
ggplot(story, aes(x=date, y=cases, color='black')) + geom_line() # WRONG
## Making maps
state <- map_data('state')
?map_data
iowa <- state %>%
filter(region == 'iowa')
ggplot(iowa, aes(x=long, y=lat)) + geom_point()
ggplot(iowa, aes(x=long, y=lat)) + geom_path()
ggplot(iowa, aes(x=long, y=lat)) + geom_line() # WRONG
dat2 <- state %>%
filter(region %in% c('iowa', 'florida'))
ggplot(dat2, aes(x=long, y=lat, group=group)) + geom_path()
ggplot(state, aes(x=long, y = lat, group=group)) + geom_path()
ggplot(state, aes(x=long, y = lat, group=region)) + geom_path()
ggplot(state, aes(x=long, y = lat, group=group)) + geom_polygon()
dat3 <- state %>%
filter(region %in% c('california', 'washington'))
ggplot(dat3, aes(x=long, y=lat, group=group)) + geom_path()
ggplot(dat3, aes(x=long, y=lat, group=group)) + geom_polygon()
ggplot(dat3, aes(x=long, y=lat, group=region)) + geom_path()
county <- map_data('county')
ggplot(county, aes(x=long, y=lat, group=group)) + geom_polygon()
dallas <- county %>%
filter(subregion == 'dallas')
ggplot(county, aes(x=long, y=lat, group=group)) + geom_polygon() + geom_polygon(data=dallas, color='blue')
library(tidyverse)
library(lubridate)
states <- map_data('state')
ggplot(states, aes(x=long, y=lat, fill=lat, group=group)) + geom_polygon()
covidRaw <- read_csv('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv')
covid <- covidRaw %>%
filter(date == mdy('08/31/21')) %>%
group_by(state) %>%
summarize(totCases = sum(cases),
totDeaths = sum(deaths))
inner_join(covid, states, by=c(state='region')) # doesn't work
head(covid)
head(states)
covid$region <- tolower(covid$state)
head(covid)
joinedDat <- inner_join(covid, states, by='region')
anti_join(covid, states)
anti_join(states, covid)
ggplot(joinedDat, aes(x=long, y=lat, group=group, fill=totCases)) + geom_polygon()
ggplot(joinedDat, aes(x=long, y=lat, group=group, fill=totDeaths)) + geom_polygon()
ggplot(joinedDat, aes(x=long, y=lat, group=group, fill=totDeaths)) + geom_polygon() + scale_fill_gradient(low='lightblue', high='black')
ggplot(joinedDat, aes(x=long, y=lat, group=group, fill=totCases)) + geom_polygon()
ggplot(states, aes(x=long, y=lat, fill=lat, group=group)) + geom_polygon()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
library(lubridate)
states <- map_data('state')
covidRaw <- read_csv('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv')
covid <- covidRaw %>%
filter(date == mdy('08/31/21')) %>%
group_by(state) %>%
summarize(totCases = sum(cases),
totDeaths = sum(deaths))
inner_join(covid, states, by=c(state='region')) # doesn't work
head(covid)
head(states)
covid$region <- tolower(covid$state)
head(covid)
library(tidyverse)
library(lubridate)
states <- map_data('state')
covidRaw <- read_csv('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv')
covid <- covidRaw %>%
filter(date == mdy('08/31/21')) %>%
group_by(state) %>%
summarize(totCases = sum(cases),
totDeaths = sum(deaths))
covid$region <- tolower(covid$state)
head(covid)
joinedDat <- inner_join(covid, states, by='region')
anti_join(covid, states)
anti_join(states, covid)
ggplot(joinedDat, aes(x=long, y=lat, group=group, fill=totCases)) + geom_polygon()
ggplot(joinedDat, aes(x=long, y=lat, group=group, fill=totCases)) + geom_polygon() +ggtitle("Total Covid cases by state")
