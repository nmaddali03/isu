getwd()
CGC_block_groups <- readRDS("C:/Users/neham/Desktop/DS401/DS 401 Spring 2024/Source Data/CGC_block_groups.rds")
`CGC_CFS_2018-2023` <- readRDS("C:/Users/neham/Desktop/DS401/DS 401 Spring 2024/Source Data/CGC_CFS_2018-2023.rds")
CGC_grid <- readRDS("C:/Users/neham/Desktop/DS401/DS 401 Spring 2024/Source Data/CGC_grid.rds")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(sf)
library(tigris)
library(mapview)
library(tidycensus)
library(leaflet)
library(tmap)
library(ggplot2)
# Read tidy census data
v17 <- load_variables(2017, "acs5", cache=TRUE)
# Get geospatial data -----------------------------------------------------
# Add sex-related variables to the list of variables
vars <- c(
"B01001_001", # Total Population
# Sex
"B01001_002", # Male Population
"B01001_026"  # Female Population
)
# Retrieve data with sex-related variables
counties <- get_acs(
geography = "county", state = "IA",
variables = vars, survey = "acs5",
output = "wide", geometry = TRUE
) |>
mutate(
male_pct = B01001_002E / B01001_001E,
female_pct = B01001_026E / B01001_001E
) |>
st_transform(
crs = 4326
)
# Choropleth map for male population percentage using ggplot
ggplot(data = counties, aes(fill = male_pct)) +
geom_sf() +
scale_fill_viridis_c(option = "B", labels = scales::label_percent()) +
labs(fill = "Percent\nMale Population") +
theme_void()
# Choropleth map for female population percentage using ggplot
ggplot(data = counties, aes(fill = female_pct)) +
geom_sf() +
scale_fill_viridis_c(option = "B", labels = scales::label_percent()) +
labs(fill = "Percent\nFemale Population") +
theme_void()
# Add age-related variables to the list of variables
vars <- c(
"B01001_001", # Total Population
# Age
"B01001_003", "B01001_004", "B01001_005", "B01001_006", "B01001_007", "B01001_027", "B01001_028", "B01001_029", "B01001_030", "B01001_031"
)
# Retrieve data with age-related variables
counties <- get_acs(
geography = "county", state = "IA",
variables = vars, survey = "acs5",
output = "wide", geometry = TRUE
) |>
mutate(
age_0_9_pct = (B01001_003E + B01001_004E + B01001_005E + B01001_006E + B01001_007E) / B01001_001E,
age_25_34_pct = (B01001_027E + B01001_028E + B01001_029E + B01001_030E + B01001_031E) / B01001_001E
) |>
st_transform(
crs = 4326
)
# Choropleth map for age 0-9 population percentage using ggplot
ggplot(data = counties, aes(fill = age_0_9_pct)) +
geom_sf() +
scale_fill_viridis_c(option = "B", labels = scales::label_percent()) +
labs(fill = "Percent\nAge 0-9 Population") +
theme_void()
# Choropleth map for age 25-34 population percentage using ggplot
ggplot(data = counties, aes(fill = age_25_34_pct)) +
geom_sf() +
scale_fill_viridis_c(option = "B", labels = scales::label_percent()) +
labs(fill = "Percent\nAge 25-34 Population") +
theme_void()
# Read CFS data ----------------------------------------------------
cfs <- read_rds("C:/Users/neham/Desktop/DS401/DS 401 Spring 2024/Source Data/CGC_CFS_2018-2023.rds")
class(cfs)
cfs_no_geo <- cfs |>
sf::st_drop_geometry() # Remove geometry from data
class(cfs_no_geo)
# No longer "sf" type, which can make it easier to manipulate if you aren't creating maps or doing geospatial operations
# Get Place data ----------------------------------------------------------
ia_places <- places(state = "IA", year = 2020) |>
st_transform(crs = 3417)
# Add place data to CFS ----------------------------------------------------------
cfs <- st_transform(cfs, crs = st_crs(ia_places))
# st_join performs a "spatial join", adding place data to the CFS data for calls that are located within a city
cfs_places <- st_join(cfs, ia_places)
mapview(ia_places) + mapview(cfs_places |> sample_n(10000), zcol = "NAME")
cfs_type_per_jurisdiction <- cfs %>%
group_by(jurisdiction, cfs_type) %>%
summarise(count = n())
#View(cfs_type_per_jurisdiction)
cfs <- cfs %>%
mutate(weekdays = ifelse(cfs_weekday %in% 2:6, "Weekday", "Weekend"))
summary(cfs[, c("cfs_year", "cfs_month", "cfs_hour", "cfs_minute")])
# Descriptive Statistics
# descriptive_stats <- cfs %>%
#   summarize(
#     Mean_cfs_year = mean(cfs_year),
#     Median_cfs_year = median(cfs_year),
#     Mode_cfs_year = as.numeric(names(table(cfs_year))[table(cfs_year) == max(table(cfs_year))]),
#     Max_cfs_year = max(cfs_year),
#     Min_cfs_year = min(cfs_year),
#     Q1_cfs_year = quantile(cfs_year, 0.25),
#     Q3_cfs_year = quantile(cfs_year, 0.75),
#     SD_cfs_year = sd(cfs_year)
#   )
# print(descriptive_stats)
# Count the occurrences of each jurisdiction
jurisdiction_counts <- cfs %>%
group_by(jurisdiction) %>%
summarise(count = n()) %>%
arrange(desc(count))
print(jurisdiction_counts)
# Count the occurrences of each category
category_counts <- cfs %>%
group_by(category) %>%
summarise(count = n()) %>%
arrange(desc(count))
print(category_counts)
other_calls <- cfs %>%
filter(category == "Other")
unique_cfs_types_other <- unique(other_calls$cfs_type)
print(unique_cfs_types_other)
# Count occurrences of each call type
call_type_counts <- cfs %>%
group_by(category) %>%
summarise(count = n()) %>%
arrange(desc(count))
ggplot(call_type_counts, aes(x = reorder(category, -count), y = count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Distribution of Call Types",
x = "Call Type",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Count occurrences of each call source
call_source_counts <- cfs %>%
group_by(jurisdiction) %>%
summarise(count = n()) %>%
arrange(desc(count))
ggplot(call_source_counts, aes(x = reorder(jurisdiction, -count), y = count)) +
geom_bar(stat = "identity", fill = "lightcoral") +
labs(title = "Distribution of Calls from Different Sources",
x = "Call Source",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Count occurrences of each call source and category
call_source_category_counts <- cfs %>%
group_by(jurisdiction, category) %>%
summarise(count = n()) %>%
arrange(jurisdiction, desc(count))
ggplot(call_source_category_counts, aes(x = reorder(jurisdiction, -count), y = count, fill = category)) +
geom_bar(stat = "identity") +
labs(title = "Distribution of Calls from Different Sources by Category",
x = "Call Source",
y = "Count",
fill = "Call Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_viridis_d()
filtered_cfs <- cfs %>%
filter(category != "Other")
call_source_category_counts <- filtered_cfs %>%
group_by(jurisdiction, category) %>%
summarise(count = n()) %>%
arrange(jurisdiction, desc(count))
ggplot(call_source_category_counts, aes(x = reorder(jurisdiction, -count), y = count, fill = category)) +
geom_bar(stat = "identity") +
labs(title = "Distribution of Calls from Different Sources by Category (Excluding 'Other')",
x = "Call Source",
y = "Count",
fill = "Call Category") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_viridis_d()  # Adjust the color scale as needed
ggplot(cfs, aes(x = cfs_month, fill = factor(cfs_weekday))) +
geom_bar(position = "stack") +
labs(title = "Monthly Distribution of Calls by Weekday",
x = "Month",
y = "Count",
fill = "Weekday") +
theme_minimal()
ggplot(cfs, aes(x = weekdays, fill = category)) +
geom_bar(position = "stack") +
labs(title = "Distribution of Calls by Category and Weekday",
x = "Weekday",
y = "Count",
fill = "Category") +
theme_minimal()
substance_categories <- c("Substance-On Premise", "Substance-Off Premise", "Substance-Driving")
substance_cfs <- cfs %>%
filter(category %in% substance_categories)
ggplot(substance_cfs, aes(x = factor(cfs_weekday), fill = category)) +
geom_bar(position = "stack") +
labs(title = "Distribution of Substance-Related Calls by Weekday",
x = "Weekday",
y = "Count",
fill = "Category") +
scale_x_discrete(labels = c("Sun", "Mon", "Tues", "Wed", "Thurs", "Fri", "Sat")) +
theme_minimal()
substance_categories <- c("Substance-On Premise", "Substance-Off Premise", "Substance-Driving")
substance_cfs <- cfs %>%
filter(category %in% substance_categories)
# Create a plot with facets for each combination of weekday and call source
ggplot(substance_cfs, aes(x = factor(cfs_weekday), fill = category)) +
geom_bar(position = "stack") +
facet_grid(. ~ jurisdiction) +
labs(title = "Distribution of Substance-Related Calls by Weekday and Call Source",
x = "Weekday",
y = "Count",
fill = "Category") +
scale_x_discrete(labels = c("Sun", "Mon", "Tues", "Wed", "Thurs", "Fri", "Sat")) +
theme_minimal()
ia_places <- places(state = "IA", year = 2020) |>
st_transform(crs = 3417)
cfs <- st_transform(cfs, crs = st_crs(ia_places))
cfs_places <- st_join(cfs, ia_places)
# Filter substance-related calls
substance_categories <- c("Substance-On Premise", "Substance-Off Premise", "Substance-Driving")
substance_cfs <- cfs_places %>%
filter(category %in% substance_categories)
mapview(ia_places) + mapview(substance_cfs, zcol = "category")
ggplot(call_source_counts, aes(x = reorder(jurisdiction, -count), y = count / sum(count))) +
geom_bar(stat = "identity", fill = "lightcoral") +
labs(title = "Distribution of Calls from Different Sources",
x = "Call Source",
y = "Percentage") +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(call_source_category_counts, aes(x = reorder(jurisdiction, -count), y = count / sum(count), fill = category)) +
geom_bar(stat = "identity") +
labs(title = "Distribution of Calls from Different Sources by Category",
x = "Call Source",
y = "Percentage",
fill = "Call Category") +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_viridis_d()
ggplot(call_source_category_counts, aes(x = reorder(jurisdiction, -count), y = count / sum(count), fill = category)) +
geom_bar(stat = "identity") +
labs(title = "Distribution of Calls from Different Sources by Category (Excluding 'Other')",
x = "Call Source",
y = "Percentage",
fill = "Call Category") +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_viridis_d()  # Adjust the color scale as needed
ggplot(call_source_category_counts, aes(x = reorder(jurisdiction, -count), y = count / sum(count), fill = category)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Distribution of Calls from Different Sources by Category (Excluding 'Other')",
x = "Call Source",
y = "Percentage",
fill = "Call Category") +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_viridis_d()  # Adjust the color scale as needed
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(sf)
library(tigris)
library(mapview)
library(tidycensus)
library(leaflet)
library(tmap)
library(ggplot2)
ggplot(call_source_category_counts, aes(x = reorder(jurisdiction, -count), y = count / sum(count), fill = category)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Distribution of Calls from Different Sources by Category (Excluding 'Other')",
x = "Call Source",
y = "Percentage",
fill = "Call Category") +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_viridis_d()  # Adjust the color scale as needed
ggplot(cfs, aes(x = cfs_month, fill = factor(cfs_weekday))) +
geom_bar(position = "fill") +  # Change position to "fill"
labs(title = "Monthly Distribution of Calls by Weekday",
x = "Month",
y = "Percentage",
fill = "Weekday") +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +  # Format y-axis as percentages
theme_minimal()
ggplot(cfs, aes(x = cfs_month, fill = factor(cfs_weekday))) +
geom_bar(position = "dodge", stat = "count") +  # Change position to "dodge" and use stat = "count"
labs(title = "Monthly Distribution of Calls by Weekday",
x = "Month",
y = "Count",
fill = "Weekday") +
theme_minimal()
ggplot(substance_cfs, aes(x = factor(cfs_weekday), fill = category)) +
geom_bar(position = "dodge") +  # Change position to "dodge"
facet_grid(. ~ jurisdiction) +
labs(title = "Distribution of Substance-Related Calls by Weekday and Call Source",
x = "Weekday",
y = "Percentage",
fill = "Category") +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +  # Format y-axis as percentages
scale_x_discrete(labels = c("Sun", "Mon", "Tues", "Wed", "Thurs", "Fri", "Sat")) +
theme_minimal()
# Load necessary libraries
library(tidymodels)
install.packages("tidymodels")
library(tidymodels)
install.packages("tidymodels")
